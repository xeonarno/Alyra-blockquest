// Generated by @wagmi/cli@1.3.0 on 7/26/2023 at 9:19:17 AM
import {
    useContractRead,
    UseContractReadConfig,
    useContractWrite,
    Address,
    UseContractWriteConfig,
    usePrepareContractWrite,
    UsePrepareContractWriteConfig,
    useContractEvent,
    UseContractEventConfig,
} from 'wagmi'
import {
    ReadContractResult,
    WriteContractMode,
    PrepareWriteContractResult,
} from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Certification
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const certificationABI = [
    {
        stateMutability: 'nonpayable',
        type: 'constructor',
        inputs: [
            {
                name: '_sessionContractAddress',
                internalType: 'address',
                type: 'address',
            },
        ],
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'owner',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'approved',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'tokenId',
                internalType: 'uint256',
                type: 'uint256',
                indexed: true,
            },
        ],
        name: 'Approval',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'owner',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'operator',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'approved',
                internalType: 'bool',
                type: 'bool',
                indexed: false,
            },
        ],
        name: 'ApprovalForAll',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: '_fromTokenId',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
            {
                name: '_toTokenId',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
        ],
        name: 'BatchMetadataUpdate',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: '_tokenId',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
        ],
        name: 'MetadataUpdate',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'previousOwner',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'newOwner',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
        ],
        name: 'OwnershipTransferred',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'from',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'to',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'tokenId',
                internalType: 'uint256',
                type: 'uint256',
                indexed: true,
            },
        ],
        name: 'Transfer',
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'to', internalType: 'address', type: 'address' },
            { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'approve',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
        name: 'balanceOf',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'getAllCertificatesOfPlayer',
        outputs: [{ name: '', internalType: 'string[]', type: 'string[]' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'getAllDiplomasOfPlayer',
        outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
        name: 'getApproved',
        outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: 'playerAddress', internalType: 'address', type: 'address' },
            { name: 'index', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'getCertificateURI',
        outputs: [{ name: '', internalType: 'string', type: 'string' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: 'diplomaId', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'getDiploma',
        outputs: [
            {
                name: '',
                internalType: 'struct Certification.Diploma',
                type: 'tuple',
                components: [
                    {
                        name: 'playerAddress',
                        internalType: 'address',
                        type: 'address',
                    },
                    {
                        name: 'teamAddress',
                        internalType: 'address',
                        type: 'address',
                    },
                    { name: 'date', internalType: 'string', type: 'string' },
                ],
            },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: 'owner', internalType: 'address', type: 'address' },
            { name: 'operator', internalType: 'address', type: 'address' },
        ],
        name: 'isApprovedForAll',
        outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'playerAddress', internalType: 'address', type: 'address' },
            { name: 'teamAddress', internalType: 'address', type: 'address' },
            { name: 'date', internalType: 'string', type: 'string' },
        ],
        name: 'mintDiploma',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'name',
        outputs: [{ name: '', internalType: 'string', type: 'string' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'owner',
        outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
        name: 'ownerOf',
        outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [],
        name: 'renounceOwnership',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'from', internalType: 'address', type: 'address' },
            { name: 'to', internalType: 'address', type: 'address' },
            { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'safeTransferFrom',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'from', internalType: 'address', type: 'address' },
            { name: 'to', internalType: 'address', type: 'address' },
            { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
            { name: 'data', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'safeTransferFrom',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'sessionContractAddress',
        outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'operator', internalType: 'address', type: 'address' },
            { name: 'approved', internalType: 'bool', type: 'bool' },
        ],
        name: 'setApprovalForAll',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: 'interfaceId', internalType: 'bytes4', type: 'bytes4' },
        ],
        name: 'supportsInterface',
        outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'symbol',
        outputs: [{ name: '', internalType: 'string', type: 'string' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
        name: 'tokenByIndex',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: 'owner', internalType: 'address', type: 'address' },
            { name: 'index', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'tokenOfOwnerByIndex',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'tokenId', internalType: 'uint256', type: 'uint256' }],
        name: 'tokenURI',
        outputs: [{ name: '', internalType: 'string', type: 'string' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'totalSupply',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'from', internalType: 'address', type: 'address' },
            { name: 'to', internalType: 'address', type: 'address' },
            { name: 'tokenId', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'transferFrom',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'newOwner', internalType: 'address', type: 'address' },
        ],
        name: 'transferOwnership',
        outputs: [],
    },
] as const

/**
 *
 */
export const certificationAddress = {
    31337: '0x55027d3dBBcEA0327eF73eFd74ba0Af42A13A966',
} as const

/**
 *
 */
export const certificationConfig = {
    address: certificationAddress,
    abi: certificationABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Session
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const sessionABI = [
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'teamId',
                internalType: 'uint256',
                type: 'uint256',
                indexed: true,
            },
            {
                name: 'roller',
                internalType: 'address',
                type: 'address',
                indexed: false,
            },
            {
                name: 'result',
                internalType: 'uint8',
                type: 'uint8',
                indexed: false,
            },
        ],
        name: 'DiceRoll',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'teamId',
                internalType: 'uint256',
                type: 'uint256',
                indexed: true,
            },
            {
                name: 'sender',
                internalType: 'address',
                type: 'address',
                indexed: false,
            },
            {
                name: 'content',
                internalType: 'string',
                type: 'string',
                indexed: false,
            },
        ],
        name: 'MessageSent',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'teamId',
                internalType: 'uint256',
                type: 'uint256',
                indexed: true,
            },
            {
                name: 'monsterId',
                internalType: 'uint256',
                type: 'uint256',
                indexed: true,
            },
            {
                name: 'monsterType',
                internalType: 'string',
                type: 'string',
                indexed: false,
            },
            {
                name: 'strength',
                internalType: 'uint8',
                type: 'uint8',
                indexed: false,
            },
        ],
        name: 'MonsterAdded',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'teamId',
                internalType: 'uint256',
                type: 'uint256',
                indexed: true,
            },
            {
                name: 'name',
                internalType: 'string',
                type: 'string',
                indexed: false,
            },
            {
                name: 'gold',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
        ],
        name: 'MonsterKilled',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'teamId',
                internalType: 'uint256',
                type: 'uint256',
                indexed: true,
            },
            {
                name: 'monsterId',
                internalType: 'uint256',
                type: 'uint256',
                indexed: true,
            },
        ],
        name: 'MonsterRemoved',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'teamId',
                internalType: 'uint256',
                type: 'uint256',
                indexed: true,
            },
            {
                name: 'playerAddress',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
        ],
        name: 'PlayerJoined',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'teamId',
                internalType: 'uint256',
                type: 'uint256',
                indexed: true,
            },
            {
                name: 'playerAddress',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
        ],
        name: 'PlayerLeft',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'teamId',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
            {
                name: 'gameMaster',
                internalType: 'address',
                type: 'address',
                indexed: false,
            },
        ],
        name: 'SessionCreated',
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'teamId', internalType: 'uint256', type: 'uint256' },
            { name: 'name', internalType: 'string', type: 'string' },
            { name: 'level', internalType: 'uint8', type: 'uint8' },
            { name: 'hitPoints', internalType: 'uint8', type: 'uint8' },
            { name: 'damage', internalType: 'uint8', type: 'uint8' },
            { name: 'experience', internalType: 'uint8', type: 'uint8' },
            { name: 'gold', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'addMonster',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'teamId', internalType: 'uint256', type: 'uint256' },
            {
                name: 'gameMasterAddress',
                internalType: 'address',
                type: 'address',
            },
            {
                name: 'playerAddresses',
                internalType: 'address[]',
                type: 'address[]',
            },
            { name: 'feeAmount', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'createSession',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: 'teamId', internalType: 'uint256', type: 'uint256' }],
        name: 'endSession',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'teamId', internalType: 'uint256', type: 'uint256' }],
        name: 'getEndTime',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'teamId', internalType: 'uint256', type: 'uint256' }],
        name: 'getMonsterCount',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'teamId', internalType: 'uint256', type: 'uint256' }],
        name: 'getMonstersKilled',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'teamId', internalType: 'uint256', type: 'uint256' }],
        name: 'getPaidPlayers',
        outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'teamId', internalType: 'uint256', type: 'uint256' }],
        name: 'getPlayers',
        outputs: [{ name: '', internalType: 'address[]', type: 'address[]' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'teamId', internalType: 'uint256', type: 'uint256' }],
        name: 'getStartTime',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'teamId', internalType: 'uint256', type: 'uint256' }],
        name: 'getTotalGold',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'teamId', internalType: 'uint256', type: 'uint256' }],
        name: 'getTotalPlayTime',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'teamId', internalType: 'uint256', type: 'uint256' }],
        name: 'isActive',
        outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: 'teamId', internalType: 'uint256', type: 'uint256' },
            { name: 'playerAddress', internalType: 'address', type: 'address' },
        ],
        name: 'isActivePlayer',
        outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'teamId', internalType: 'uint256', type: 'uint256' },
            { name: 'monsterIndex', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'killMonster',
        outputs: [],
    },
    {
        stateMutability: 'payable',
        type: 'function',
        inputs: [{ name: 'teamId', internalType: 'uint256', type: 'uint256' }],
        name: 'payFee',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'teamId', internalType: 'uint256', type: 'uint256' },
            { name: 'monsterIndex', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'removeMonster',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'teamId', internalType: 'uint256', type: 'uint256' },
            { name: 'diceSides', internalType: 'uint8', type: 'uint8' },
        ],
        name: 'rollDice',
        outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'teamId', internalType: 'uint256', type: 'uint256' },
            { name: 'content', internalType: 'string', type: 'string' },
        ],
        name: 'sendMessage',
        outputs: [],
    },
] as const

/**
 *
 */
export const sessionAddress = {
    31337: '0xbeC6419cD931e29ef41157fe24C6928a0C952f0b',
} as const

/**
 *
 */
export const sessionConfig = {
    address: sessionAddress,
    abi: sessionABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GameMaster
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const gameMasterABI = [
    {
        stateMutability: 'nonpayable',
        type: 'constructor',
        inputs: [
            {
                name: '_teamContractAddress',
                internalType: 'address',
                type: 'address',
            },
        ],
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'gmAddress',
                internalType: 'address',
                type: 'address',
                indexed: false,
            },
        ],
        name: 'GMRegistered',
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'name', internalType: 'string', type: 'string' },
            { name: 'surname', internalType: 'string', type: 'string' },
            { name: 'imageUri', internalType: 'string', type: 'string' },
            { name: 'biography', internalType: 'string', type: 'string' },
        ],
        name: 'createGM',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: '_name', internalType: 'string', type: 'string' },
            { name: 'image', internalType: 'string', type: 'string' },
            { name: '_desc', internalType: 'string', type: 'string' },
        ],
        name: 'createTeam',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: 'teamId', internalType: 'uint256', type: 'uint256' }],
        name: 'deleteTeam',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: 'teamId', internalType: 'uint256', type: 'uint256' }],
        name: 'endGame',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: '', internalType: 'address', type: 'address' }],
        name: 'gameMasters',
        outputs: [
            { name: 'name', internalType: 'string', type: 'string' },
            { name: 'surname', internalType: 'string', type: 'string' },
            { name: 'imageUri', internalType: 'string', type: 'string' },
            { name: 'biography', internalType: 'string', type: 'string' },
            { name: 'gmAddress', internalType: 'address', type: 'address' },
        ],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'teamId', internalType: 'uint256', type: 'uint256' },
            { name: 'amount', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'startGame',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'teamContract',
        outputs: [{ name: '', internalType: 'contract Team', type: 'address' }],
    },
] as const

/**
 *
 */
export const gameMasterAddress = {
    31337: '0x996785Fe937d92EDBF420F3Bf70Acc62ecD6f655',
} as const

/**
 *
 */
export const gameMasterConfig = {
    address: gameMasterAddress,
    abi: gameMasterABI,
} as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Player
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const playerABI = [
    {
        stateMutability: 'nonpayable',
        type: 'constructor',
        inputs: [
            {
                name: '_teamContract',
                internalType: 'contract Team',
                type: 'address',
            },
        ],
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'player',
                internalType: 'address',
                type: 'address',
                indexed: false,
            },
            {
                name: 'damage',
                internalType: 'uint8',
                type: 'uint8',
                indexed: false,
            },
        ],
        name: 'DamageReceived',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'player',
                internalType: 'address',
                type: 'address',
                indexed: false,
            },
            {
                name: 'result',
                internalType: 'uint8',
                type: 'uint8',
                indexed: false,
            },
        ],
        name: 'DiceRolled',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'player',
                internalType: 'address',
                type: 'address',
                indexed: false,
            },
            {
                name: 'message',
                internalType: 'string',
                type: 'string',
                indexed: false,
            },
        ],
        name: 'MessageSent',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'player',
                internalType: 'address',
                type: 'address',
                indexed: false,
            },
        ],
        name: 'PlayerDied',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'player',
                internalType: 'address',
                type: 'address',
                indexed: false,
            },
        ],
        name: 'PlayerRegistered',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'player',
                internalType: 'address',
                type: 'address',
                indexed: false,
            },
            {
                name: 'teamId',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
        ],
        name: 'SessionJoined',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'player',
                internalType: 'address',
                type: 'address',
                indexed: false,
            },
            {
                name: 'teamId',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
        ],
        name: 'TeamJoined',
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'teamId', internalType: 'uint256', type: 'uint256' }],
        name: 'checkSessionAvailability',
        outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            {
                name: '_playerAddress',
                internalType: 'address',
                type: 'address',
            },
        ],
        name: 'getPlayerAddress',
        outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            {
                name: '_playerAddress',
                internalType: 'address',
                type: 'address',
            },
        ],
        name: 'getPlayerFirstName',
        outputs: [{ name: '', internalType: 'string', type: 'string' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            {
                name: '_playerAddress',
                internalType: 'address',
                type: 'address',
            },
        ],
        name: 'getPlayerLastName',
        outputs: [{ name: '', internalType: 'string', type: 'string' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: 'teamId', internalType: 'uint256', type: 'uint256' }],
        name: 'joinTeam',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: '', internalType: 'address', type: 'address' },
            { name: '', internalType: 'address', type: 'address' },
            { name: '', internalType: 'uint256', type: 'uint256' },
            { name: '', internalType: 'bytes', type: 'bytes' },
        ],
        name: 'onERC721Received',
        outputs: [{ name: '', internalType: 'bytes4', type: 'bytes4' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: '', internalType: 'address', type: 'address' }],
        name: 'players',
        outputs: [
            { name: 'firstName', internalType: 'string', type: 'string' },
            { name: 'lastName', internalType: 'string', type: 'string' },
            { name: 'image', internalType: 'string', type: 'string' },
            { name: 'description', internalType: 'string', type: 'string' },
            { name: 'playerAddress', internalType: 'address', type: 'address' },
            {
                name: 'character',
                internalType: 'struct Player.Character',
                type: 'tuple',
                components: [
                    {
                        name: 'characterType',
                        internalType: 'string',
                        type: 'string',
                    },
                    {
                        name: 'characterClass',
                        internalType: 'string',
                        type: 'string',
                    },
                    {
                        name: 'initiative',
                        internalType: 'uint8',
                        type: 'uint8',
                    },
                    { name: 'strength', internalType: 'uint8', type: 'uint8' },
                    { name: 'defense', internalType: 'uint8', type: 'uint8' },
                    {
                        name: 'intelligence',
                        internalType: 'uint8',
                        type: 'uint8',
                    },
                    { name: 'magic', internalType: 'uint8', type: 'uint8' },
                    {
                        name: 'healthPoints',
                        internalType: 'uint8',
                        type: 'uint8',
                    },
                    { name: 'isAlive', internalType: 'bool', type: 'bool' },
                ],
            },
            { name: 'teamId', internalType: 'uint256', type: 'uint256' },
        ],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'firstName', internalType: 'string', type: 'string' },
            { name: 'lastName', internalType: 'string', type: 'string' },
            { name: 'image', internalType: 'string', type: 'string' },
            { name: 'description', internalType: 'string', type: 'string' },
        ],
        name: 'registerPlayer',
        outputs: [],
    },
] as const

/**
 *
 */
export const playerAddress = {
    31337: '0x92b0d1Cc77b84973B7041CB9275d41F09840eaDd',
} as const

/**
 *
 */
export const playerConfig = { address: playerAddress, abi: playerABI } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Team
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 *
 */
export const teamABI = [
    {
        stateMutability: 'nonpayable',
        type: 'constructor',
        inputs: [
            {
                name: '_sessionContractAddress',
                internalType: 'address',
                type: 'address',
            },
            {
                name: '_certificationContractAddress',
                internalType: 'address',
                type: 'address',
            },
        ],
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'teamId',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
        ],
        name: 'GamesPlayedIncremented',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'previousOwner',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
            {
                name: 'newOwner',
                internalType: 'address',
                type: 'address',
                indexed: true,
            },
        ],
        name: 'OwnershipTransferred',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'teamId',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
            {
                name: 'player',
                internalType: 'address',
                type: 'address',
                indexed: false,
            },
        ],
        name: 'PlayerJoinedTeam',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'teamId',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
            {
                name: 'player',
                internalType: 'address',
                type: 'address',
                indexed: false,
            },
        ],
        name: 'PlayerLeftTeam',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'teamId',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
            {
                name: 'gm',
                internalType: 'address',
                type: 'address',
                indexed: false,
            },
        ],
        name: 'SessionCreated',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'teamId',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
            {
                name: 'gm',
                internalType: 'address',
                type: 'address',
                indexed: false,
            },
        ],
        name: 'SessionEnd',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'teamId',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
            {
                name: 'gm',
                internalType: 'address',
                type: 'address',
                indexed: false,
            },
        ],
        name: 'TeamCreated',
    },
    {
        type: 'event',
        anonymous: false,
        inputs: [
            {
                name: 'teamId',
                internalType: 'uint256',
                type: 'uint256',
                indexed: false,
            },
        ],
        name: 'TeamDeleted',
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'MAX_PLAYERS_PER_TEAM',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'MAX_TEAM_PER_GM',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'certificationContract',
        outputs: [
            {
                name: '',
                internalType: 'contract Certification',
                type: 'address',
            },
        ],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'teamId', internalType: 'uint256', type: 'uint256' },
            { name: 'amount', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'createSession',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: '_name', internalType: 'string', type: 'string' },
            { name: 'image', internalType: 'string', type: 'string' },
            { name: '_desc', internalType: 'string', type: 'string' },
        ],
        name: 'createTeam',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: 'teamId', internalType: 'uint256', type: 'uint256' }],
        name: 'deleteTeam',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: 'teamId', internalType: 'uint256', type: 'uint256' }],
        name: 'endSession',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'teamId', internalType: 'uint256', type: 'uint256' }],
        name: 'getTeam',
        outputs: [
            {
                name: '',
                internalType: 'struct Team.Group',
                type: 'tuple',
                components: [
                    { name: 'gm', internalType: 'address', type: 'address' },
                    {
                        name: 'teamId',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                    {
                        name: 'players',
                        internalType: 'address[]',
                        type: 'address[]',
                    },
                    { name: 'name', internalType: 'string', type: 'string' },
                    {
                        name: 'imageURI',
                        internalType: 'string',
                        type: 'string',
                    },
                    {
                        name: 'description',
                        internalType: 'string',
                        type: 'string',
                    },
                    { name: 'isActive', internalType: 'bool', type: 'bool' },
                    {
                        name: 'sessionExists',
                        internalType: 'bool',
                        type: 'bool',
                    },
                    {
                        name: 'sessionId',
                        internalType: 'uint256',
                        type: 'uint256',
                    },
                ],
            },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'gm', internalType: 'address', type: 'address' }],
        name: 'getTeamsOfGM',
        outputs: [{ name: '', internalType: 'uint256[]', type: 'uint256[]' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: 'playerAddress', internalType: 'address', type: 'address' },
        ],
        name: 'getTeamsOfPlayer',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: 'teamId', internalType: 'uint256', type: 'uint256' }],
        name: 'isSessionActive',
        outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: 'teamId', internalType: 'uint256', type: 'uint256' }],
        name: 'joinTeam',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [{ name: 'teamId', internalType: 'uint256', type: 'uint256' }],
        name: 'leaveTeam',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'owner',
        outputs: [{ name: '', internalType: 'address', type: 'address' }],
    },
    {
        stateMutability: 'payable',
        type: 'function',
        inputs: [{ name: 'teamId', internalType: 'uint256', type: 'uint256' }],
        name: 'payFee',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [],
        name: 'renounceOwnership',
        outputs: [],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'teamId', internalType: 'uint256', type: 'uint256' },
            { name: 'diceSides', internalType: 'uint8', type: 'uint8' },
        ],
        name: 'rollDice',
        outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'teamId', internalType: 'uint256', type: 'uint256' },
            { name: 'message', internalType: 'string', type: 'string' },
        ],
        name: 'sendMessage',
        outputs: [],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [],
        name: 'sessionContract',
        outputs: [
            { name: '', internalType: 'contract Session', type: 'address' },
        ],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [
            { name: '', internalType: 'address', type: 'address' },
            { name: '', internalType: 'uint256', type: 'uint256' },
        ],
        name: 'teamsByGM',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'view',
        type: 'function',
        inputs: [{ name: '', internalType: 'address', type: 'address' }],
        name: 'teamsByPlayer',
        outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    },
    {
        stateMutability: 'nonpayable',
        type: 'function',
        inputs: [
            { name: 'newOwner', internalType: 'address', type: 'address' },
        ],
        name: 'transferOwnership',
        outputs: [],
    },
] as const

/**
 *
 */
export const teamAddress = {
    31337: '0x9eb52339B52e71B1EFD5537947e75D23b3a7719B',
} as const

/**
 *
 */
export const teamConfig = { address: teamAddress, abi: teamABI } as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link certificationABI}__.
 *
 *
 */
export function useCertificationRead<
    TFunctionName extends string,
    TSelectData = ReadContractResult<typeof certificationABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<
            typeof certificationABI,
            TFunctionName,
            TSelectData
        >,
        'abi' | 'address'
    > & { chainId?: keyof typeof certificationAddress } = {} as any,
) {
    return useContractRead({
        abi: certificationABI,
        address: certificationAddress[31337],
        ...config,
    } as UseContractReadConfig<
        typeof certificationABI,
        TFunctionName,
        TSelectData
    >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link certificationABI}__ and `functionName` set to `"balanceOf"`.
 *
 *
 */
export function useCertificationBalanceOf<
    TFunctionName extends 'balanceOf',
    TSelectData = ReadContractResult<typeof certificationABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<
            typeof certificationABI,
            TFunctionName,
            TSelectData
        >,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof certificationAddress } = {} as any,
) {
    return useContractRead({
        abi: certificationABI,
        address: certificationAddress[31337],
        functionName: 'balanceOf',
        ...config,
    } as UseContractReadConfig<
        typeof certificationABI,
        TFunctionName,
        TSelectData
    >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link certificationABI}__ and `functionName` set to `"getAllCertificatesOfPlayer"`.
 *
 *
 */
export function useCertificationGetAllCertificatesOfPlayer<
    TFunctionName extends 'getAllCertificatesOfPlayer',
    TSelectData = ReadContractResult<typeof certificationABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<
            typeof certificationABI,
            TFunctionName,
            TSelectData
        >,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof certificationAddress } = {} as any,
) {
    return useContractRead({
        abi: certificationABI,
        address: certificationAddress[31337],
        functionName: 'getAllCertificatesOfPlayer',
        ...config,
    } as UseContractReadConfig<
        typeof certificationABI,
        TFunctionName,
        TSelectData
    >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link certificationABI}__ and `functionName` set to `"getAllDiplomasOfPlayer"`.
 *
 *
 */
export function useCertificationGetAllDiplomasOfPlayer<
    TFunctionName extends 'getAllDiplomasOfPlayer',
    TSelectData = ReadContractResult<typeof certificationABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<
            typeof certificationABI,
            TFunctionName,
            TSelectData
        >,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof certificationAddress } = {} as any,
) {
    return useContractRead({
        abi: certificationABI,
        address: certificationAddress[31337],
        functionName: 'getAllDiplomasOfPlayer',
        ...config,
    } as UseContractReadConfig<
        typeof certificationABI,
        TFunctionName,
        TSelectData
    >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link certificationABI}__ and `functionName` set to `"getApproved"`.
 *
 *
 */
export function useCertificationGetApproved<
    TFunctionName extends 'getApproved',
    TSelectData = ReadContractResult<typeof certificationABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<
            typeof certificationABI,
            TFunctionName,
            TSelectData
        >,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof certificationAddress } = {} as any,
) {
    return useContractRead({
        abi: certificationABI,
        address: certificationAddress[31337],
        functionName: 'getApproved',
        ...config,
    } as UseContractReadConfig<
        typeof certificationABI,
        TFunctionName,
        TSelectData
    >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link certificationABI}__ and `functionName` set to `"getCertificateURI"`.
 *
 *
 */
export function useCertificationGetCertificateUri<
    TFunctionName extends 'getCertificateURI',
    TSelectData = ReadContractResult<typeof certificationABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<
            typeof certificationABI,
            TFunctionName,
            TSelectData
        >,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof certificationAddress } = {} as any,
) {
    return useContractRead({
        abi: certificationABI,
        address: certificationAddress[31337],
        functionName: 'getCertificateURI',
        ...config,
    } as UseContractReadConfig<
        typeof certificationABI,
        TFunctionName,
        TSelectData
    >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link certificationABI}__ and `functionName` set to `"getDiploma"`.
 *
 *
 */
export function useCertificationGetDiploma<
    TFunctionName extends 'getDiploma',
    TSelectData = ReadContractResult<typeof certificationABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<
            typeof certificationABI,
            TFunctionName,
            TSelectData
        >,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof certificationAddress } = {} as any,
) {
    return useContractRead({
        abi: certificationABI,
        address: certificationAddress[31337],
        functionName: 'getDiploma',
        ...config,
    } as UseContractReadConfig<
        typeof certificationABI,
        TFunctionName,
        TSelectData
    >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link certificationABI}__ and `functionName` set to `"isApprovedForAll"`.
 *
 *
 */
export function useCertificationIsApprovedForAll<
    TFunctionName extends 'isApprovedForAll',
    TSelectData = ReadContractResult<typeof certificationABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<
            typeof certificationABI,
            TFunctionName,
            TSelectData
        >,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof certificationAddress } = {} as any,
) {
    return useContractRead({
        abi: certificationABI,
        address: certificationAddress[31337],
        functionName: 'isApprovedForAll',
        ...config,
    } as UseContractReadConfig<
        typeof certificationABI,
        TFunctionName,
        TSelectData
    >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link certificationABI}__ and `functionName` set to `"name"`.
 *
 *
 */
export function useCertificationName<
    TFunctionName extends 'name',
    TSelectData = ReadContractResult<typeof certificationABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<
            typeof certificationABI,
            TFunctionName,
            TSelectData
        >,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof certificationAddress } = {} as any,
) {
    return useContractRead({
        abi: certificationABI,
        address: certificationAddress[31337],
        functionName: 'name',
        ...config,
    } as UseContractReadConfig<
        typeof certificationABI,
        TFunctionName,
        TSelectData
    >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link certificationABI}__ and `functionName` set to `"owner"`.
 *
 *
 */
export function useCertificationOwner<
    TFunctionName extends 'owner',
    TSelectData = ReadContractResult<typeof certificationABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<
            typeof certificationABI,
            TFunctionName,
            TSelectData
        >,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof certificationAddress } = {} as any,
) {
    return useContractRead({
        abi: certificationABI,
        address: certificationAddress[31337],
        functionName: 'owner',
        ...config,
    } as UseContractReadConfig<
        typeof certificationABI,
        TFunctionName,
        TSelectData
    >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link certificationABI}__ and `functionName` set to `"ownerOf"`.
 *
 *
 */
export function useCertificationOwnerOf<
    TFunctionName extends 'ownerOf',
    TSelectData = ReadContractResult<typeof certificationABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<
            typeof certificationABI,
            TFunctionName,
            TSelectData
        >,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof certificationAddress } = {} as any,
) {
    return useContractRead({
        abi: certificationABI,
        address: certificationAddress[31337],
        functionName: 'ownerOf',
        ...config,
    } as UseContractReadConfig<
        typeof certificationABI,
        TFunctionName,
        TSelectData
    >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link certificationABI}__ and `functionName` set to `"sessionContractAddress"`.
 *
 *
 */
export function useCertificationSessionContractAddress<
    TFunctionName extends 'sessionContractAddress',
    TSelectData = ReadContractResult<typeof certificationABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<
            typeof certificationABI,
            TFunctionName,
            TSelectData
        >,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof certificationAddress } = {} as any,
) {
    return useContractRead({
        abi: certificationABI,
        address: certificationAddress[31337],
        functionName: 'sessionContractAddress',
        ...config,
    } as UseContractReadConfig<
        typeof certificationABI,
        TFunctionName,
        TSelectData
    >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link certificationABI}__ and `functionName` set to `"supportsInterface"`.
 *
 *
 */
export function useCertificationSupportsInterface<
    TFunctionName extends 'supportsInterface',
    TSelectData = ReadContractResult<typeof certificationABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<
            typeof certificationABI,
            TFunctionName,
            TSelectData
        >,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof certificationAddress } = {} as any,
) {
    return useContractRead({
        abi: certificationABI,
        address: certificationAddress[31337],
        functionName: 'supportsInterface',
        ...config,
    } as UseContractReadConfig<
        typeof certificationABI,
        TFunctionName,
        TSelectData
    >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link certificationABI}__ and `functionName` set to `"symbol"`.
 *
 *
 */
export function useCertificationSymbol<
    TFunctionName extends 'symbol',
    TSelectData = ReadContractResult<typeof certificationABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<
            typeof certificationABI,
            TFunctionName,
            TSelectData
        >,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof certificationAddress } = {} as any,
) {
    return useContractRead({
        abi: certificationABI,
        address: certificationAddress[31337],
        functionName: 'symbol',
        ...config,
    } as UseContractReadConfig<
        typeof certificationABI,
        TFunctionName,
        TSelectData
    >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link certificationABI}__ and `functionName` set to `"tokenByIndex"`.
 *
 *
 */
export function useCertificationTokenByIndex<
    TFunctionName extends 'tokenByIndex',
    TSelectData = ReadContractResult<typeof certificationABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<
            typeof certificationABI,
            TFunctionName,
            TSelectData
        >,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof certificationAddress } = {} as any,
) {
    return useContractRead({
        abi: certificationABI,
        address: certificationAddress[31337],
        functionName: 'tokenByIndex',
        ...config,
    } as UseContractReadConfig<
        typeof certificationABI,
        TFunctionName,
        TSelectData
    >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link certificationABI}__ and `functionName` set to `"tokenOfOwnerByIndex"`.
 *
 *
 */
export function useCertificationTokenOfOwnerByIndex<
    TFunctionName extends 'tokenOfOwnerByIndex',
    TSelectData = ReadContractResult<typeof certificationABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<
            typeof certificationABI,
            TFunctionName,
            TSelectData
        >,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof certificationAddress } = {} as any,
) {
    return useContractRead({
        abi: certificationABI,
        address: certificationAddress[31337],
        functionName: 'tokenOfOwnerByIndex',
        ...config,
    } as UseContractReadConfig<
        typeof certificationABI,
        TFunctionName,
        TSelectData
    >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link certificationABI}__ and `functionName` set to `"tokenURI"`.
 *
 *
 */
export function useCertificationTokenUri<
    TFunctionName extends 'tokenURI',
    TSelectData = ReadContractResult<typeof certificationABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<
            typeof certificationABI,
            TFunctionName,
            TSelectData
        >,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof certificationAddress } = {} as any,
) {
    return useContractRead({
        abi: certificationABI,
        address: certificationAddress[31337],
        functionName: 'tokenURI',
        ...config,
    } as UseContractReadConfig<
        typeof certificationABI,
        TFunctionName,
        TSelectData
    >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link certificationABI}__ and `functionName` set to `"totalSupply"`.
 *
 *
 */
export function useCertificationTotalSupply<
    TFunctionName extends 'totalSupply',
    TSelectData = ReadContractResult<typeof certificationABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<
            typeof certificationABI,
            TFunctionName,
            TSelectData
        >,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof certificationAddress } = {} as any,
) {
    return useContractRead({
        abi: certificationABI,
        address: certificationAddress[31337],
        functionName: 'totalSupply',
        ...config,
    } as UseContractReadConfig<
        typeof certificationABI,
        TFunctionName,
        TSelectData
    >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link certificationABI}__.
 *
 *
 */
export function useCertificationWrite<
    TFunctionName extends string,
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof certificationAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof certificationABI,
                  string
              >['request']['abi'],
              TFunctionName,
              TMode
          > & { address?: Address; chainId?: TChainId }
        : UseContractWriteConfig<
              typeof certificationABI,
              TFunctionName,
              TMode
          > & {
              abi?: never
              address?: never
              chainId?: TChainId
          } = {} as any,
) {
    return useContractWrite<typeof certificationABI, TFunctionName, TMode>({
        abi: certificationABI,
        address: certificationAddress[31337],
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link certificationABI}__ and `functionName` set to `"approve"`.
 *
 *
 */
export function useCertificationApprove<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof certificationAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof certificationABI,
                  'approve'
              >['request']['abi'],
              'approve',
              TMode
          > & {
              address?: Address
              chainId?: TChainId
              functionName?: 'approve'
          }
        : UseContractWriteConfig<typeof certificationABI, 'approve', TMode> & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'approve'
          } = {} as any,
) {
    return useContractWrite<typeof certificationABI, 'approve', TMode>({
        abi: certificationABI,
        address: certificationAddress[31337],
        functionName: 'approve',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link certificationABI}__ and `functionName` set to `"mintDiploma"`.
 *
 *
 */
export function useCertificationMintDiploma<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof certificationAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof certificationABI,
                  'mintDiploma'
              >['request']['abi'],
              'mintDiploma',
              TMode
          > & {
              address?: Address
              chainId?: TChainId
              functionName?: 'mintDiploma'
          }
        : UseContractWriteConfig<
              typeof certificationABI,
              'mintDiploma',
              TMode
          > & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'mintDiploma'
          } = {} as any,
) {
    return useContractWrite<typeof certificationABI, 'mintDiploma', TMode>({
        abi: certificationABI,
        address: certificationAddress[31337],
        functionName: 'mintDiploma',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link certificationABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 *
 */
export function useCertificationRenounceOwnership<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof certificationAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof certificationABI,
                  'renounceOwnership'
              >['request']['abi'],
              'renounceOwnership',
              TMode
          > & {
              address?: Address
              chainId?: TChainId
              functionName?: 'renounceOwnership'
          }
        : UseContractWriteConfig<
              typeof certificationABI,
              'renounceOwnership',
              TMode
          > & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'renounceOwnership'
          } = {} as any,
) {
    return useContractWrite<
        typeof certificationABI,
        'renounceOwnership',
        TMode
    >({
        abi: certificationABI,
        address: certificationAddress[31337],
        functionName: 'renounceOwnership',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link certificationABI}__ and `functionName` set to `"safeTransferFrom"`.
 *
 *
 */
export function useCertificationSafeTransferFrom<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof certificationAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof certificationABI,
                  'safeTransferFrom'
              >['request']['abi'],
              'safeTransferFrom',
              TMode
          > & {
              address?: Address
              chainId?: TChainId
              functionName?: 'safeTransferFrom'
          }
        : UseContractWriteConfig<
              typeof certificationABI,
              'safeTransferFrom',
              TMode
          > & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'safeTransferFrom'
          } = {} as any,
) {
    return useContractWrite<typeof certificationABI, 'safeTransferFrom', TMode>(
        {
            abi: certificationABI,
            address: certificationAddress[31337],
            functionName: 'safeTransferFrom',
            ...config,
        } as any,
    )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link certificationABI}__ and `functionName` set to `"setApprovalForAll"`.
 *
 *
 */
export function useCertificationSetApprovalForAll<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof certificationAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof certificationABI,
                  'setApprovalForAll'
              >['request']['abi'],
              'setApprovalForAll',
              TMode
          > & {
              address?: Address
              chainId?: TChainId
              functionName?: 'setApprovalForAll'
          }
        : UseContractWriteConfig<
              typeof certificationABI,
              'setApprovalForAll',
              TMode
          > & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'setApprovalForAll'
          } = {} as any,
) {
    return useContractWrite<
        typeof certificationABI,
        'setApprovalForAll',
        TMode
    >({
        abi: certificationABI,
        address: certificationAddress[31337],
        functionName: 'setApprovalForAll',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link certificationABI}__ and `functionName` set to `"transferFrom"`.
 *
 *
 */
export function useCertificationTransferFrom<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof certificationAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof certificationABI,
                  'transferFrom'
              >['request']['abi'],
              'transferFrom',
              TMode
          > & {
              address?: Address
              chainId?: TChainId
              functionName?: 'transferFrom'
          }
        : UseContractWriteConfig<
              typeof certificationABI,
              'transferFrom',
              TMode
          > & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'transferFrom'
          } = {} as any,
) {
    return useContractWrite<typeof certificationABI, 'transferFrom', TMode>({
        abi: certificationABI,
        address: certificationAddress[31337],
        functionName: 'transferFrom',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link certificationABI}__ and `functionName` set to `"transferOwnership"`.
 *
 *
 */
export function useCertificationTransferOwnership<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof certificationAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof certificationABI,
                  'transferOwnership'
              >['request']['abi'],
              'transferOwnership',
              TMode
          > & {
              address?: Address
              chainId?: TChainId
              functionName?: 'transferOwnership'
          }
        : UseContractWriteConfig<
              typeof certificationABI,
              'transferOwnership',
              TMode
          > & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'transferOwnership'
          } = {} as any,
) {
    return useContractWrite<
        typeof certificationABI,
        'transferOwnership',
        TMode
    >({
        abi: certificationABI,
        address: certificationAddress[31337],
        functionName: 'transferOwnership',
        ...config,
    } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link certificationABI}__.
 *
 *
 */
export function usePrepareCertificationWrite<TFunctionName extends string>(
    config: Omit<
        UsePrepareContractWriteConfig<typeof certificationABI, TFunctionName>,
        'abi' | 'address'
    > & { chainId?: keyof typeof certificationAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: certificationABI,
        address: certificationAddress[31337],
        ...config,
    } as UsePrepareContractWriteConfig<typeof certificationABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link certificationABI}__ and `functionName` set to `"approve"`.
 *
 *
 */
export function usePrepareCertificationApprove(
    config: Omit<
        UsePrepareContractWriteConfig<typeof certificationABI, 'approve'>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof certificationAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: certificationABI,
        address: certificationAddress[31337],
        functionName: 'approve',
        ...config,
    } as UsePrepareContractWriteConfig<typeof certificationABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link certificationABI}__ and `functionName` set to `"mintDiploma"`.
 *
 *
 */
export function usePrepareCertificationMintDiploma(
    config: Omit<
        UsePrepareContractWriteConfig<typeof certificationABI, 'mintDiploma'>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof certificationAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: certificationABI,
        address: certificationAddress[31337],
        functionName: 'mintDiploma',
        ...config,
    } as UsePrepareContractWriteConfig<typeof certificationABI, 'mintDiploma'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link certificationABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 *
 */
export function usePrepareCertificationRenounceOwnership(
    config: Omit<
        UsePrepareContractWriteConfig<
            typeof certificationABI,
            'renounceOwnership'
        >,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof certificationAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: certificationABI,
        address: certificationAddress[31337],
        functionName: 'renounceOwnership',
        ...config,
    } as UsePrepareContractWriteConfig<
        typeof certificationABI,
        'renounceOwnership'
    >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link certificationABI}__ and `functionName` set to `"safeTransferFrom"`.
 *
 *
 */
export function usePrepareCertificationSafeTransferFrom(
    config: Omit<
        UsePrepareContractWriteConfig<
            typeof certificationABI,
            'safeTransferFrom'
        >,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof certificationAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: certificationABI,
        address: certificationAddress[31337],
        functionName: 'safeTransferFrom',
        ...config,
    } as UsePrepareContractWriteConfig<
        typeof certificationABI,
        'safeTransferFrom'
    >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link certificationABI}__ and `functionName` set to `"setApprovalForAll"`.
 *
 *
 */
export function usePrepareCertificationSetApprovalForAll(
    config: Omit<
        UsePrepareContractWriteConfig<
            typeof certificationABI,
            'setApprovalForAll'
        >,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof certificationAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: certificationABI,
        address: certificationAddress[31337],
        functionName: 'setApprovalForAll',
        ...config,
    } as UsePrepareContractWriteConfig<
        typeof certificationABI,
        'setApprovalForAll'
    >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link certificationABI}__ and `functionName` set to `"transferFrom"`.
 *
 *
 */
export function usePrepareCertificationTransferFrom(
    config: Omit<
        UsePrepareContractWriteConfig<typeof certificationABI, 'transferFrom'>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof certificationAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: certificationABI,
        address: certificationAddress[31337],
        functionName: 'transferFrom',
        ...config,
    } as UsePrepareContractWriteConfig<typeof certificationABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link certificationABI}__ and `functionName` set to `"transferOwnership"`.
 *
 *
 */
export function usePrepareCertificationTransferOwnership(
    config: Omit<
        UsePrepareContractWriteConfig<
            typeof certificationABI,
            'transferOwnership'
        >,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof certificationAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: certificationABI,
        address: certificationAddress[31337],
        functionName: 'transferOwnership',
        ...config,
    } as UsePrepareContractWriteConfig<
        typeof certificationABI,
        'transferOwnership'
    >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link certificationABI}__.
 *
 *
 */
export function useCertificationEvent<TEventName extends string>(
    config: Omit<
        UseContractEventConfig<typeof certificationABI, TEventName>,
        'abi' | 'address'
    > & { chainId?: keyof typeof certificationAddress } = {} as any,
) {
    return useContractEvent({
        abi: certificationABI,
        address: certificationAddress[31337],
        ...config,
    } as UseContractEventConfig<typeof certificationABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link certificationABI}__ and `eventName` set to `"Approval"`.
 *
 *
 */
export function useCertificationApprovalEvent(
    config: Omit<
        UseContractEventConfig<typeof certificationABI, 'Approval'>,
        'abi' | 'address' | 'eventName'
    > & { chainId?: keyof typeof certificationAddress } = {} as any,
) {
    return useContractEvent({
        abi: certificationABI,
        address: certificationAddress[31337],
        eventName: 'Approval',
        ...config,
    } as UseContractEventConfig<typeof certificationABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link certificationABI}__ and `eventName` set to `"ApprovalForAll"`.
 *
 *
 */
export function useCertificationApprovalForAllEvent(
    config: Omit<
        UseContractEventConfig<typeof certificationABI, 'ApprovalForAll'>,
        'abi' | 'address' | 'eventName'
    > & { chainId?: keyof typeof certificationAddress } = {} as any,
) {
    return useContractEvent({
        abi: certificationABI,
        address: certificationAddress[31337],
        eventName: 'ApprovalForAll',
        ...config,
    } as UseContractEventConfig<typeof certificationABI, 'ApprovalForAll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link certificationABI}__ and `eventName` set to `"BatchMetadataUpdate"`.
 *
 *
 */
export function useCertificationBatchMetadataUpdateEvent(
    config: Omit<
        UseContractEventConfig<typeof certificationABI, 'BatchMetadataUpdate'>,
        'abi' | 'address' | 'eventName'
    > & { chainId?: keyof typeof certificationAddress } = {} as any,
) {
    return useContractEvent({
        abi: certificationABI,
        address: certificationAddress[31337],
        eventName: 'BatchMetadataUpdate',
        ...config,
    } as UseContractEventConfig<typeof certificationABI, 'BatchMetadataUpdate'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link certificationABI}__ and `eventName` set to `"MetadataUpdate"`.
 *
 *
 */
export function useCertificationMetadataUpdateEvent(
    config: Omit<
        UseContractEventConfig<typeof certificationABI, 'MetadataUpdate'>,
        'abi' | 'address' | 'eventName'
    > & { chainId?: keyof typeof certificationAddress } = {} as any,
) {
    return useContractEvent({
        abi: certificationABI,
        address: certificationAddress[31337],
        eventName: 'MetadataUpdate',
        ...config,
    } as UseContractEventConfig<typeof certificationABI, 'MetadataUpdate'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link certificationABI}__ and `eventName` set to `"OwnershipTransferred"`.
 *
 *
 */
export function useCertificationOwnershipTransferredEvent(
    config: Omit<
        UseContractEventConfig<typeof certificationABI, 'OwnershipTransferred'>,
        'abi' | 'address' | 'eventName'
    > & { chainId?: keyof typeof certificationAddress } = {} as any,
) {
    return useContractEvent({
        abi: certificationABI,
        address: certificationAddress[31337],
        eventName: 'OwnershipTransferred',
        ...config,
    } as UseContractEventConfig<
        typeof certificationABI,
        'OwnershipTransferred'
    >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link certificationABI}__ and `eventName` set to `"Transfer"`.
 *
 *
 */
export function useCertificationTransferEvent(
    config: Omit<
        UseContractEventConfig<typeof certificationABI, 'Transfer'>,
        'abi' | 'address' | 'eventName'
    > & { chainId?: keyof typeof certificationAddress } = {} as any,
) {
    return useContractEvent({
        abi: certificationABI,
        address: certificationAddress[31337],
        eventName: 'Transfer',
        ...config,
    } as UseContractEventConfig<typeof certificationABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sessionABI}__.
 *
 *
 */
export function useSessionRead<
    TFunctionName extends string,
    TSelectData = ReadContractResult<typeof sessionABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof sessionABI, TFunctionName, TSelectData>,
        'abi' | 'address'
    > & { chainId?: keyof typeof sessionAddress } = {} as any,
) {
    return useContractRead({
        abi: sessionABI,
        address: sessionAddress[31337],
        ...config,
    } as UseContractReadConfig<typeof sessionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sessionABI}__ and `functionName` set to `"getEndTime"`.
 *
 *
 */
export function useSessionGetEndTime<
    TFunctionName extends 'getEndTime',
    TSelectData = ReadContractResult<typeof sessionABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof sessionABI, TFunctionName, TSelectData>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof sessionAddress } = {} as any,
) {
    return useContractRead({
        abi: sessionABI,
        address: sessionAddress[31337],
        functionName: 'getEndTime',
        ...config,
    } as UseContractReadConfig<typeof sessionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sessionABI}__ and `functionName` set to `"getMonsterCount"`.
 *
 *
 */
export function useSessionGetMonsterCount<
    TFunctionName extends 'getMonsterCount',
    TSelectData = ReadContractResult<typeof sessionABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof sessionABI, TFunctionName, TSelectData>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof sessionAddress } = {} as any,
) {
    return useContractRead({
        abi: sessionABI,
        address: sessionAddress[31337],
        functionName: 'getMonsterCount',
        ...config,
    } as UseContractReadConfig<typeof sessionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sessionABI}__ and `functionName` set to `"getMonstersKilled"`.
 *
 *
 */
export function useSessionGetMonstersKilled<
    TFunctionName extends 'getMonstersKilled',
    TSelectData = ReadContractResult<typeof sessionABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof sessionABI, TFunctionName, TSelectData>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof sessionAddress } = {} as any,
) {
    return useContractRead({
        abi: sessionABI,
        address: sessionAddress[31337],
        functionName: 'getMonstersKilled',
        ...config,
    } as UseContractReadConfig<typeof sessionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sessionABI}__ and `functionName` set to `"getPaidPlayers"`.
 *
 *
 */
export function useSessionGetPaidPlayers<
    TFunctionName extends 'getPaidPlayers',
    TSelectData = ReadContractResult<typeof sessionABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof sessionABI, TFunctionName, TSelectData>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof sessionAddress } = {} as any,
) {
    return useContractRead({
        abi: sessionABI,
        address: sessionAddress[31337],
        functionName: 'getPaidPlayers',
        ...config,
    } as UseContractReadConfig<typeof sessionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sessionABI}__ and `functionName` set to `"getPlayers"`.
 *
 *
 */
export function useSessionGetPlayers<
    TFunctionName extends 'getPlayers',
    TSelectData = ReadContractResult<typeof sessionABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof sessionABI, TFunctionName, TSelectData>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof sessionAddress } = {} as any,
) {
    return useContractRead({
        abi: sessionABI,
        address: sessionAddress[31337],
        functionName: 'getPlayers',
        ...config,
    } as UseContractReadConfig<typeof sessionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sessionABI}__ and `functionName` set to `"getStartTime"`.
 *
 *
 */
export function useSessionGetStartTime<
    TFunctionName extends 'getStartTime',
    TSelectData = ReadContractResult<typeof sessionABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof sessionABI, TFunctionName, TSelectData>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof sessionAddress } = {} as any,
) {
    return useContractRead({
        abi: sessionABI,
        address: sessionAddress[31337],
        functionName: 'getStartTime',
        ...config,
    } as UseContractReadConfig<typeof sessionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sessionABI}__ and `functionName` set to `"getTotalGold"`.
 *
 *
 */
export function useSessionGetTotalGold<
    TFunctionName extends 'getTotalGold',
    TSelectData = ReadContractResult<typeof sessionABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof sessionABI, TFunctionName, TSelectData>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof sessionAddress } = {} as any,
) {
    return useContractRead({
        abi: sessionABI,
        address: sessionAddress[31337],
        functionName: 'getTotalGold',
        ...config,
    } as UseContractReadConfig<typeof sessionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sessionABI}__ and `functionName` set to `"getTotalPlayTime"`.
 *
 *
 */
export function useSessionGetTotalPlayTime<
    TFunctionName extends 'getTotalPlayTime',
    TSelectData = ReadContractResult<typeof sessionABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof sessionABI, TFunctionName, TSelectData>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof sessionAddress } = {} as any,
) {
    return useContractRead({
        abi: sessionABI,
        address: sessionAddress[31337],
        functionName: 'getTotalPlayTime',
        ...config,
    } as UseContractReadConfig<typeof sessionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sessionABI}__ and `functionName` set to `"isActive"`.
 *
 *
 */
export function useSessionIsActive<
    TFunctionName extends 'isActive',
    TSelectData = ReadContractResult<typeof sessionABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof sessionABI, TFunctionName, TSelectData>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof sessionAddress } = {} as any,
) {
    return useContractRead({
        abi: sessionABI,
        address: sessionAddress[31337],
        functionName: 'isActive',
        ...config,
    } as UseContractReadConfig<typeof sessionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sessionABI}__ and `functionName` set to `"isActivePlayer"`.
 *
 *
 */
export function useSessionIsActivePlayer<
    TFunctionName extends 'isActivePlayer',
    TSelectData = ReadContractResult<typeof sessionABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof sessionABI, TFunctionName, TSelectData>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof sessionAddress } = {} as any,
) {
    return useContractRead({
        abi: sessionABI,
        address: sessionAddress[31337],
        functionName: 'isActivePlayer',
        ...config,
    } as UseContractReadConfig<typeof sessionABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sessionABI}__.
 *
 *
 */
export function useSessionWrite<
    TFunctionName extends string,
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof sessionAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof sessionABI,
                  string
              >['request']['abi'],
              TFunctionName,
              TMode
          > & { address?: Address; chainId?: TChainId }
        : UseContractWriteConfig<typeof sessionABI, TFunctionName, TMode> & {
              abi?: never
              address?: never
              chainId?: TChainId
          } = {} as any,
) {
    return useContractWrite<typeof sessionABI, TFunctionName, TMode>({
        abi: sessionABI,
        address: sessionAddress[31337],
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sessionABI}__ and `functionName` set to `"addMonster"`.
 *
 *
 */
export function useSessionAddMonster<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof sessionAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof sessionABI,
                  'addMonster'
              >['request']['abi'],
              'addMonster',
              TMode
          > & {
              address?: Address
              chainId?: TChainId
              functionName?: 'addMonster'
          }
        : UseContractWriteConfig<typeof sessionABI, 'addMonster', TMode> & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'addMonster'
          } = {} as any,
) {
    return useContractWrite<typeof sessionABI, 'addMonster', TMode>({
        abi: sessionABI,
        address: sessionAddress[31337],
        functionName: 'addMonster',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sessionABI}__ and `functionName` set to `"createSession"`.
 *
 *
 */
export function useSessionCreateSession<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof sessionAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof sessionABI,
                  'createSession'
              >['request']['abi'],
              'createSession',
              TMode
          > & {
              address?: Address
              chainId?: TChainId
              functionName?: 'createSession'
          }
        : UseContractWriteConfig<typeof sessionABI, 'createSession', TMode> & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'createSession'
          } = {} as any,
) {
    return useContractWrite<typeof sessionABI, 'createSession', TMode>({
        abi: sessionABI,
        address: sessionAddress[31337],
        functionName: 'createSession',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sessionABI}__ and `functionName` set to `"endSession"`.
 *
 *
 */
export function useSessionEndSession<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof sessionAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof sessionABI,
                  'endSession'
              >['request']['abi'],
              'endSession',
              TMode
          > & {
              address?: Address
              chainId?: TChainId
              functionName?: 'endSession'
          }
        : UseContractWriteConfig<typeof sessionABI, 'endSession', TMode> & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'endSession'
          } = {} as any,
) {
    return useContractWrite<typeof sessionABI, 'endSession', TMode>({
        abi: sessionABI,
        address: sessionAddress[31337],
        functionName: 'endSession',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sessionABI}__ and `functionName` set to `"killMonster"`.
 *
 *
 */
export function useSessionKillMonster<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof sessionAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof sessionABI,
                  'killMonster'
              >['request']['abi'],
              'killMonster',
              TMode
          > & {
              address?: Address
              chainId?: TChainId
              functionName?: 'killMonster'
          }
        : UseContractWriteConfig<typeof sessionABI, 'killMonster', TMode> & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'killMonster'
          } = {} as any,
) {
    return useContractWrite<typeof sessionABI, 'killMonster', TMode>({
        abi: sessionABI,
        address: sessionAddress[31337],
        functionName: 'killMonster',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sessionABI}__ and `functionName` set to `"payFee"`.
 *
 *
 */
export function useSessionPayFee<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof sessionAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof sessionABI,
                  'payFee'
              >['request']['abi'],
              'payFee',
              TMode
          > & { address?: Address; chainId?: TChainId; functionName?: 'payFee' }
        : UseContractWriteConfig<typeof sessionABI, 'payFee', TMode> & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'payFee'
          } = {} as any,
) {
    return useContractWrite<typeof sessionABI, 'payFee', TMode>({
        abi: sessionABI,
        address: sessionAddress[31337],
        functionName: 'payFee',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sessionABI}__ and `functionName` set to `"removeMonster"`.
 *
 *
 */
export function useSessionRemoveMonster<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof sessionAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof sessionABI,
                  'removeMonster'
              >['request']['abi'],
              'removeMonster',
              TMode
          > & {
              address?: Address
              chainId?: TChainId
              functionName?: 'removeMonster'
          }
        : UseContractWriteConfig<typeof sessionABI, 'removeMonster', TMode> & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'removeMonster'
          } = {} as any,
) {
    return useContractWrite<typeof sessionABI, 'removeMonster', TMode>({
        abi: sessionABI,
        address: sessionAddress[31337],
        functionName: 'removeMonster',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sessionABI}__ and `functionName` set to `"rollDice"`.
 *
 *
 */
export function useSessionRollDice<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof sessionAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof sessionABI,
                  'rollDice'
              >['request']['abi'],
              'rollDice',
              TMode
          > & {
              address?: Address
              chainId?: TChainId
              functionName?: 'rollDice'
          }
        : UseContractWriteConfig<typeof sessionABI, 'rollDice', TMode> & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'rollDice'
          } = {} as any,
) {
    return useContractWrite<typeof sessionABI, 'rollDice', TMode>({
        abi: sessionABI,
        address: sessionAddress[31337],
        functionName: 'rollDice',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sessionABI}__ and `functionName` set to `"sendMessage"`.
 *
 *
 */
export function useSessionSendMessage<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof sessionAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof sessionABI,
                  'sendMessage'
              >['request']['abi'],
              'sendMessage',
              TMode
          > & {
              address?: Address
              chainId?: TChainId
              functionName?: 'sendMessage'
          }
        : UseContractWriteConfig<typeof sessionABI, 'sendMessage', TMode> & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'sendMessage'
          } = {} as any,
) {
    return useContractWrite<typeof sessionABI, 'sendMessage', TMode>({
        abi: sessionABI,
        address: sessionAddress[31337],
        functionName: 'sendMessage',
        ...config,
    } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sessionABI}__.
 *
 *
 */
export function usePrepareSessionWrite<TFunctionName extends string>(
    config: Omit<
        UsePrepareContractWriteConfig<typeof sessionABI, TFunctionName>,
        'abi' | 'address'
    > & { chainId?: keyof typeof sessionAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: sessionABI,
        address: sessionAddress[31337],
        ...config,
    } as UsePrepareContractWriteConfig<typeof sessionABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sessionABI}__ and `functionName` set to `"addMonster"`.
 *
 *
 */
export function usePrepareSessionAddMonster(
    config: Omit<
        UsePrepareContractWriteConfig<typeof sessionABI, 'addMonster'>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof sessionAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: sessionABI,
        address: sessionAddress[31337],
        functionName: 'addMonster',
        ...config,
    } as UsePrepareContractWriteConfig<typeof sessionABI, 'addMonster'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sessionABI}__ and `functionName` set to `"createSession"`.
 *
 *
 */
export function usePrepareSessionCreateSession(
    config: Omit<
        UsePrepareContractWriteConfig<typeof sessionABI, 'createSession'>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof sessionAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: sessionABI,
        address: sessionAddress[31337],
        functionName: 'createSession',
        ...config,
    } as UsePrepareContractWriteConfig<typeof sessionABI, 'createSession'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sessionABI}__ and `functionName` set to `"endSession"`.
 *
 *
 */
export function usePrepareSessionEndSession(
    config: Omit<
        UsePrepareContractWriteConfig<typeof sessionABI, 'endSession'>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof sessionAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: sessionABI,
        address: sessionAddress[31337],
        functionName: 'endSession',
        ...config,
    } as UsePrepareContractWriteConfig<typeof sessionABI, 'endSession'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sessionABI}__ and `functionName` set to `"killMonster"`.
 *
 *
 */
export function usePrepareSessionKillMonster(
    config: Omit<
        UsePrepareContractWriteConfig<typeof sessionABI, 'killMonster'>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof sessionAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: sessionABI,
        address: sessionAddress[31337],
        functionName: 'killMonster',
        ...config,
    } as UsePrepareContractWriteConfig<typeof sessionABI, 'killMonster'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sessionABI}__ and `functionName` set to `"payFee"`.
 *
 *
 */
export function usePrepareSessionPayFee(
    config: Omit<
        UsePrepareContractWriteConfig<typeof sessionABI, 'payFee'>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof sessionAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: sessionABI,
        address: sessionAddress[31337],
        functionName: 'payFee',
        ...config,
    } as UsePrepareContractWriteConfig<typeof sessionABI, 'payFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sessionABI}__ and `functionName` set to `"removeMonster"`.
 *
 *
 */
export function usePrepareSessionRemoveMonster(
    config: Omit<
        UsePrepareContractWriteConfig<typeof sessionABI, 'removeMonster'>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof sessionAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: sessionABI,
        address: sessionAddress[31337],
        functionName: 'removeMonster',
        ...config,
    } as UsePrepareContractWriteConfig<typeof sessionABI, 'removeMonster'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sessionABI}__ and `functionName` set to `"rollDice"`.
 *
 *
 */
export function usePrepareSessionRollDice(
    config: Omit<
        UsePrepareContractWriteConfig<typeof sessionABI, 'rollDice'>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof sessionAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: sessionABI,
        address: sessionAddress[31337],
        functionName: 'rollDice',
        ...config,
    } as UsePrepareContractWriteConfig<typeof sessionABI, 'rollDice'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sessionABI}__ and `functionName` set to `"sendMessage"`.
 *
 *
 */
export function usePrepareSessionSendMessage(
    config: Omit<
        UsePrepareContractWriteConfig<typeof sessionABI, 'sendMessage'>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof sessionAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: sessionABI,
        address: sessionAddress[31337],
        functionName: 'sendMessage',
        ...config,
    } as UsePrepareContractWriteConfig<typeof sessionABI, 'sendMessage'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sessionABI}__.
 *
 *
 */
export function useSessionEvent<TEventName extends string>(
    config: Omit<
        UseContractEventConfig<typeof sessionABI, TEventName>,
        'abi' | 'address'
    > & { chainId?: keyof typeof sessionAddress } = {} as any,
) {
    return useContractEvent({
        abi: sessionABI,
        address: sessionAddress[31337],
        ...config,
    } as UseContractEventConfig<typeof sessionABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sessionABI}__ and `eventName` set to `"DiceRoll"`.
 *
 *
 */
export function useSessionDiceRollEvent(
    config: Omit<
        UseContractEventConfig<typeof sessionABI, 'DiceRoll'>,
        'abi' | 'address' | 'eventName'
    > & { chainId?: keyof typeof sessionAddress } = {} as any,
) {
    return useContractEvent({
        abi: sessionABI,
        address: sessionAddress[31337],
        eventName: 'DiceRoll',
        ...config,
    } as UseContractEventConfig<typeof sessionABI, 'DiceRoll'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sessionABI}__ and `eventName` set to `"MessageSent"`.
 *
 *
 */
export function useSessionMessageSentEvent(
    config: Omit<
        UseContractEventConfig<typeof sessionABI, 'MessageSent'>,
        'abi' | 'address' | 'eventName'
    > & { chainId?: keyof typeof sessionAddress } = {} as any,
) {
    return useContractEvent({
        abi: sessionABI,
        address: sessionAddress[31337],
        eventName: 'MessageSent',
        ...config,
    } as UseContractEventConfig<typeof sessionABI, 'MessageSent'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sessionABI}__ and `eventName` set to `"MonsterAdded"`.
 *
 *
 */
export function useSessionMonsterAddedEvent(
    config: Omit<
        UseContractEventConfig<typeof sessionABI, 'MonsterAdded'>,
        'abi' | 'address' | 'eventName'
    > & { chainId?: keyof typeof sessionAddress } = {} as any,
) {
    return useContractEvent({
        abi: sessionABI,
        address: sessionAddress[31337],
        eventName: 'MonsterAdded',
        ...config,
    } as UseContractEventConfig<typeof sessionABI, 'MonsterAdded'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sessionABI}__ and `eventName` set to `"MonsterKilled"`.
 *
 *
 */
export function useSessionMonsterKilledEvent(
    config: Omit<
        UseContractEventConfig<typeof sessionABI, 'MonsterKilled'>,
        'abi' | 'address' | 'eventName'
    > & { chainId?: keyof typeof sessionAddress } = {} as any,
) {
    return useContractEvent({
        abi: sessionABI,
        address: sessionAddress[31337],
        eventName: 'MonsterKilled',
        ...config,
    } as UseContractEventConfig<typeof sessionABI, 'MonsterKilled'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sessionABI}__ and `eventName` set to `"MonsterRemoved"`.
 *
 *
 */
export function useSessionMonsterRemovedEvent(
    config: Omit<
        UseContractEventConfig<typeof sessionABI, 'MonsterRemoved'>,
        'abi' | 'address' | 'eventName'
    > & { chainId?: keyof typeof sessionAddress } = {} as any,
) {
    return useContractEvent({
        abi: sessionABI,
        address: sessionAddress[31337],
        eventName: 'MonsterRemoved',
        ...config,
    } as UseContractEventConfig<typeof sessionABI, 'MonsterRemoved'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sessionABI}__ and `eventName` set to `"PlayerJoined"`.
 *
 *
 */
export function useSessionPlayerJoinedEvent(
    config: Omit<
        UseContractEventConfig<typeof sessionABI, 'PlayerJoined'>,
        'abi' | 'address' | 'eventName'
    > & { chainId?: keyof typeof sessionAddress } = {} as any,
) {
    return useContractEvent({
        abi: sessionABI,
        address: sessionAddress[31337],
        eventName: 'PlayerJoined',
        ...config,
    } as UseContractEventConfig<typeof sessionABI, 'PlayerJoined'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sessionABI}__ and `eventName` set to `"PlayerLeft"`.
 *
 *
 */
export function useSessionPlayerLeftEvent(
    config: Omit<
        UseContractEventConfig<typeof sessionABI, 'PlayerLeft'>,
        'abi' | 'address' | 'eventName'
    > & { chainId?: keyof typeof sessionAddress } = {} as any,
) {
    return useContractEvent({
        abi: sessionABI,
        address: sessionAddress[31337],
        eventName: 'PlayerLeft',
        ...config,
    } as UseContractEventConfig<typeof sessionABI, 'PlayerLeft'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sessionABI}__ and `eventName` set to `"SessionCreated"`.
 *
 *
 */
export function useSessionSessionCreatedEvent(
    config: Omit<
        UseContractEventConfig<typeof sessionABI, 'SessionCreated'>,
        'abi' | 'address' | 'eventName'
    > & { chainId?: keyof typeof sessionAddress } = {} as any,
) {
    return useContractEvent({
        abi: sessionABI,
        address: sessionAddress[31337],
        eventName: 'SessionCreated',
        ...config,
    } as UseContractEventConfig<typeof sessionABI, 'SessionCreated'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gameMasterABI}__.
 *
 *
 */
export function useGameMasterRead<
    TFunctionName extends string,
    TSelectData = ReadContractResult<typeof gameMasterABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof gameMasterABI, TFunctionName, TSelectData>,
        'abi' | 'address'
    > & { chainId?: keyof typeof gameMasterAddress } = {} as any,
) {
    return useContractRead({
        abi: gameMasterABI,
        address: gameMasterAddress[31337],
        ...config,
    } as UseContractReadConfig<
        typeof gameMasterABI,
        TFunctionName,
        TSelectData
    >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gameMasterABI}__ and `functionName` set to `"gameMasters"`.
 *
 *
 */
export function useGameMasterGameMasters<
    TFunctionName extends 'gameMasters',
    TSelectData = ReadContractResult<typeof gameMasterABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof gameMasterABI, TFunctionName, TSelectData>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof gameMasterAddress } = {} as any,
) {
    return useContractRead({
        abi: gameMasterABI,
        address: gameMasterAddress[31337],
        functionName: 'gameMasters',
        ...config,
    } as UseContractReadConfig<
        typeof gameMasterABI,
        TFunctionName,
        TSelectData
    >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link gameMasterABI}__ and `functionName` set to `"teamContract"`.
 *
 *
 */
export function useGameMasterTeamContract<
    TFunctionName extends 'teamContract',
    TSelectData = ReadContractResult<typeof gameMasterABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof gameMasterABI, TFunctionName, TSelectData>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof gameMasterAddress } = {} as any,
) {
    return useContractRead({
        abi: gameMasterABI,
        address: gameMasterAddress[31337],
        functionName: 'teamContract',
        ...config,
    } as UseContractReadConfig<
        typeof gameMasterABI,
        TFunctionName,
        TSelectData
    >)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gameMasterABI}__.
 *
 *
 */
export function useGameMasterWrite<
    TFunctionName extends string,
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof gameMasterAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof gameMasterABI,
                  string
              >['request']['abi'],
              TFunctionName,
              TMode
          > & { address?: Address; chainId?: TChainId }
        : UseContractWriteConfig<typeof gameMasterABI, TFunctionName, TMode> & {
              abi?: never
              address?: never
              chainId?: TChainId
          } = {} as any,
) {
    return useContractWrite<typeof gameMasterABI, TFunctionName, TMode>({
        abi: gameMasterABI,
        address: gameMasterAddress[31337],
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gameMasterABI}__ and `functionName` set to `"createGM"`.
 *
 *
 */
export function useGameMasterCreateGm<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof gameMasterAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof gameMasterABI,
                  'createGM'
              >['request']['abi'],
              'createGM',
              TMode
          > & {
              address?: Address
              chainId?: TChainId
              functionName?: 'createGM'
          }
        : UseContractWriteConfig<typeof gameMasterABI, 'createGM', TMode> & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'createGM'
          } = {} as any,
) {
    return useContractWrite<typeof gameMasterABI, 'createGM', TMode>({
        abi: gameMasterABI,
        address: gameMasterAddress[31337],
        functionName: 'createGM',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gameMasterABI}__ and `functionName` set to `"createTeam"`.
 *
 *
 */
export function useGameMasterCreateTeam<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof gameMasterAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof gameMasterABI,
                  'createTeam'
              >['request']['abi'],
              'createTeam',
              TMode
          > & {
              address?: Address
              chainId?: TChainId
              functionName?: 'createTeam'
          }
        : UseContractWriteConfig<typeof gameMasterABI, 'createTeam', TMode> & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'createTeam'
          } = {} as any,
) {
    return useContractWrite<typeof gameMasterABI, 'createTeam', TMode>({
        abi: gameMasterABI,
        address: gameMasterAddress[31337],
        functionName: 'createTeam',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gameMasterABI}__ and `functionName` set to `"deleteTeam"`.
 *
 *
 */
export function useGameMasterDeleteTeam<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof gameMasterAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof gameMasterABI,
                  'deleteTeam'
              >['request']['abi'],
              'deleteTeam',
              TMode
          > & {
              address?: Address
              chainId?: TChainId
              functionName?: 'deleteTeam'
          }
        : UseContractWriteConfig<typeof gameMasterABI, 'deleteTeam', TMode> & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'deleteTeam'
          } = {} as any,
) {
    return useContractWrite<typeof gameMasterABI, 'deleteTeam', TMode>({
        abi: gameMasterABI,
        address: gameMasterAddress[31337],
        functionName: 'deleteTeam',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gameMasterABI}__ and `functionName` set to `"endGame"`.
 *
 *
 */
export function useGameMasterEndGame<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof gameMasterAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof gameMasterABI,
                  'endGame'
              >['request']['abi'],
              'endGame',
              TMode
          > & {
              address?: Address
              chainId?: TChainId
              functionName?: 'endGame'
          }
        : UseContractWriteConfig<typeof gameMasterABI, 'endGame', TMode> & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'endGame'
          } = {} as any,
) {
    return useContractWrite<typeof gameMasterABI, 'endGame', TMode>({
        abi: gameMasterABI,
        address: gameMasterAddress[31337],
        functionName: 'endGame',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link gameMasterABI}__ and `functionName` set to `"startGame"`.
 *
 *
 */
export function useGameMasterStartGame<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof gameMasterAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof gameMasterABI,
                  'startGame'
              >['request']['abi'],
              'startGame',
              TMode
          > & {
              address?: Address
              chainId?: TChainId
              functionName?: 'startGame'
          }
        : UseContractWriteConfig<typeof gameMasterABI, 'startGame', TMode> & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'startGame'
          } = {} as any,
) {
    return useContractWrite<typeof gameMasterABI, 'startGame', TMode>({
        abi: gameMasterABI,
        address: gameMasterAddress[31337],
        functionName: 'startGame',
        ...config,
    } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gameMasterABI}__.
 *
 *
 */
export function usePrepareGameMasterWrite<TFunctionName extends string>(
    config: Omit<
        UsePrepareContractWriteConfig<typeof gameMasterABI, TFunctionName>,
        'abi' | 'address'
    > & { chainId?: keyof typeof gameMasterAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: gameMasterABI,
        address: gameMasterAddress[31337],
        ...config,
    } as UsePrepareContractWriteConfig<typeof gameMasterABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gameMasterABI}__ and `functionName` set to `"createGM"`.
 *
 *
 */
export function usePrepareGameMasterCreateGm(
    config: Omit<
        UsePrepareContractWriteConfig<typeof gameMasterABI, 'createGM'>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof gameMasterAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: gameMasterABI,
        address: gameMasterAddress[31337],
        functionName: 'createGM',
        ...config,
    } as UsePrepareContractWriteConfig<typeof gameMasterABI, 'createGM'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gameMasterABI}__ and `functionName` set to `"createTeam"`.
 *
 *
 */
export function usePrepareGameMasterCreateTeam(
    config: Omit<
        UsePrepareContractWriteConfig<typeof gameMasterABI, 'createTeam'>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof gameMasterAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: gameMasterABI,
        address: gameMasterAddress[31337],
        functionName: 'createTeam',
        ...config,
    } as UsePrepareContractWriteConfig<typeof gameMasterABI, 'createTeam'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gameMasterABI}__ and `functionName` set to `"deleteTeam"`.
 *
 *
 */
export function usePrepareGameMasterDeleteTeam(
    config: Omit<
        UsePrepareContractWriteConfig<typeof gameMasterABI, 'deleteTeam'>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof gameMasterAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: gameMasterABI,
        address: gameMasterAddress[31337],
        functionName: 'deleteTeam',
        ...config,
    } as UsePrepareContractWriteConfig<typeof gameMasterABI, 'deleteTeam'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gameMasterABI}__ and `functionName` set to `"endGame"`.
 *
 *
 */
export function usePrepareGameMasterEndGame(
    config: Omit<
        UsePrepareContractWriteConfig<typeof gameMasterABI, 'endGame'>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof gameMasterAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: gameMasterABI,
        address: gameMasterAddress[31337],
        functionName: 'endGame',
        ...config,
    } as UsePrepareContractWriteConfig<typeof gameMasterABI, 'endGame'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link gameMasterABI}__ and `functionName` set to `"startGame"`.
 *
 *
 */
export function usePrepareGameMasterStartGame(
    config: Omit<
        UsePrepareContractWriteConfig<typeof gameMasterABI, 'startGame'>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof gameMasterAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: gameMasterABI,
        address: gameMasterAddress[31337],
        functionName: 'startGame',
        ...config,
    } as UsePrepareContractWriteConfig<typeof gameMasterABI, 'startGame'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gameMasterABI}__.
 *
 *
 */
export function useGameMasterEvent<TEventName extends string>(
    config: Omit<
        UseContractEventConfig<typeof gameMasterABI, TEventName>,
        'abi' | 'address'
    > & { chainId?: keyof typeof gameMasterAddress } = {} as any,
) {
    return useContractEvent({
        abi: gameMasterABI,
        address: gameMasterAddress[31337],
        ...config,
    } as UseContractEventConfig<typeof gameMasterABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link gameMasterABI}__ and `eventName` set to `"GMRegistered"`.
 *
 *
 */
export function useGameMasterGmRegisteredEvent(
    config: Omit<
        UseContractEventConfig<typeof gameMasterABI, 'GMRegistered'>,
        'abi' | 'address' | 'eventName'
    > & { chainId?: keyof typeof gameMasterAddress } = {} as any,
) {
    return useContractEvent({
        abi: gameMasterABI,
        address: gameMasterAddress[31337],
        eventName: 'GMRegistered',
        ...config,
    } as UseContractEventConfig<typeof gameMasterABI, 'GMRegistered'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link playerABI}__.
 *
 *
 */
export function usePlayerRead<
    TFunctionName extends string,
    TSelectData = ReadContractResult<typeof playerABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof playerABI, TFunctionName, TSelectData>,
        'abi' | 'address'
    > & { chainId?: keyof typeof playerAddress } = {} as any,
) {
    return useContractRead({
        abi: playerABI,
        address: playerAddress[31337],
        ...config,
    } as UseContractReadConfig<typeof playerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link playerABI}__ and `functionName` set to `"checkSessionAvailability"`.
 *
 *
 */
export function usePlayerCheckSessionAvailability<
    TFunctionName extends 'checkSessionAvailability',
    TSelectData = ReadContractResult<typeof playerABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof playerABI, TFunctionName, TSelectData>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof playerAddress } = {} as any,
) {
    return useContractRead({
        abi: playerABI,
        address: playerAddress[31337],
        functionName: 'checkSessionAvailability',
        ...config,
    } as UseContractReadConfig<typeof playerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link playerABI}__ and `functionName` set to `"getPlayerAddress"`.
 *
 *
 */
export function usePlayerGetPlayerAddress<
    TFunctionName extends 'getPlayerAddress',
    TSelectData = ReadContractResult<typeof playerABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof playerABI, TFunctionName, TSelectData>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof playerAddress } = {} as any,
) {
    return useContractRead({
        abi: playerABI,
        address: playerAddress[31337],
        functionName: 'getPlayerAddress',
        ...config,
    } as UseContractReadConfig<typeof playerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link playerABI}__ and `functionName` set to `"getPlayerFirstName"`.
 *
 *
 */
export function usePlayerGetPlayerFirstName<
    TFunctionName extends 'getPlayerFirstName',
    TSelectData = ReadContractResult<typeof playerABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof playerABI, TFunctionName, TSelectData>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof playerAddress } = {} as any,
) {
    return useContractRead({
        abi: playerABI,
        address: playerAddress[31337],
        functionName: 'getPlayerFirstName',
        ...config,
    } as UseContractReadConfig<typeof playerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link playerABI}__ and `functionName` set to `"getPlayerLastName"`.
 *
 *
 */
export function usePlayerGetPlayerLastName<
    TFunctionName extends 'getPlayerLastName',
    TSelectData = ReadContractResult<typeof playerABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof playerABI, TFunctionName, TSelectData>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof playerAddress } = {} as any,
) {
    return useContractRead({
        abi: playerABI,
        address: playerAddress[31337],
        functionName: 'getPlayerLastName',
        ...config,
    } as UseContractReadConfig<typeof playerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link playerABI}__ and `functionName` set to `"players"`.
 *
 *
 */
export function usePlayerPlayers<
    TFunctionName extends 'players',
    TSelectData = ReadContractResult<typeof playerABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof playerABI, TFunctionName, TSelectData>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof playerAddress } = {} as any,
) {
    return useContractRead({
        abi: playerABI,
        address: playerAddress[31337],
        functionName: 'players',
        ...config,
    } as UseContractReadConfig<typeof playerABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link playerABI}__.
 *
 *
 */
export function usePlayerWrite<
    TFunctionName extends string,
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof playerAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof playerABI,
                  string
              >['request']['abi'],
              TFunctionName,
              TMode
          > & { address?: Address; chainId?: TChainId }
        : UseContractWriteConfig<typeof playerABI, TFunctionName, TMode> & {
              abi?: never
              address?: never
              chainId?: TChainId
          } = {} as any,
) {
    return useContractWrite<typeof playerABI, TFunctionName, TMode>({
        abi: playerABI,
        address: playerAddress[31337],
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link playerABI}__ and `functionName` set to `"joinTeam"`.
 *
 *
 */
export function usePlayerJoinTeam<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof playerAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof playerABI,
                  'joinTeam'
              >['request']['abi'],
              'joinTeam',
              TMode
          > & {
              address?: Address
              chainId?: TChainId
              functionName?: 'joinTeam'
          }
        : UseContractWriteConfig<typeof playerABI, 'joinTeam', TMode> & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'joinTeam'
          } = {} as any,
) {
    return useContractWrite<typeof playerABI, 'joinTeam', TMode>({
        abi: playerABI,
        address: playerAddress[31337],
        functionName: 'joinTeam',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link playerABI}__ and `functionName` set to `"onERC721Received"`.
 *
 *
 */
export function usePlayerOnErc721Received<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof playerAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof playerABI,
                  'onERC721Received'
              >['request']['abi'],
              'onERC721Received',
              TMode
          > & {
              address?: Address
              chainId?: TChainId
              functionName?: 'onERC721Received'
          }
        : UseContractWriteConfig<
              typeof playerABI,
              'onERC721Received',
              TMode
          > & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'onERC721Received'
          } = {} as any,
) {
    return useContractWrite<typeof playerABI, 'onERC721Received', TMode>({
        abi: playerABI,
        address: playerAddress[31337],
        functionName: 'onERC721Received',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link playerABI}__ and `functionName` set to `"registerPlayer"`.
 *
 *
 */
export function usePlayerRegisterPlayer<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof playerAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof playerABI,
                  'registerPlayer'
              >['request']['abi'],
              'registerPlayer',
              TMode
          > & {
              address?: Address
              chainId?: TChainId
              functionName?: 'registerPlayer'
          }
        : UseContractWriteConfig<typeof playerABI, 'registerPlayer', TMode> & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'registerPlayer'
          } = {} as any,
) {
    return useContractWrite<typeof playerABI, 'registerPlayer', TMode>({
        abi: playerABI,
        address: playerAddress[31337],
        functionName: 'registerPlayer',
        ...config,
    } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link playerABI}__.
 *
 *
 */
export function usePreparePlayerWrite<TFunctionName extends string>(
    config: Omit<
        UsePrepareContractWriteConfig<typeof playerABI, TFunctionName>,
        'abi' | 'address'
    > & { chainId?: keyof typeof playerAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: playerABI,
        address: playerAddress[31337],
        ...config,
    } as UsePrepareContractWriteConfig<typeof playerABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link playerABI}__ and `functionName` set to `"joinTeam"`.
 *
 *
 */
export function usePreparePlayerJoinTeam(
    config: Omit<
        UsePrepareContractWriteConfig<typeof playerABI, 'joinTeam'>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof playerAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: playerABI,
        address: playerAddress[31337],
        functionName: 'joinTeam',
        ...config,
    } as UsePrepareContractWriteConfig<typeof playerABI, 'joinTeam'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link playerABI}__ and `functionName` set to `"onERC721Received"`.
 *
 *
 */
export function usePreparePlayerOnErc721Received(
    config: Omit<
        UsePrepareContractWriteConfig<typeof playerABI, 'onERC721Received'>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof playerAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: playerABI,
        address: playerAddress[31337],
        functionName: 'onERC721Received',
        ...config,
    } as UsePrepareContractWriteConfig<typeof playerABI, 'onERC721Received'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link playerABI}__ and `functionName` set to `"registerPlayer"`.
 *
 *
 */
export function usePreparePlayerRegisterPlayer(
    config: Omit<
        UsePrepareContractWriteConfig<typeof playerABI, 'registerPlayer'>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof playerAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: playerABI,
        address: playerAddress[31337],
        functionName: 'registerPlayer',
        ...config,
    } as UsePrepareContractWriteConfig<typeof playerABI, 'registerPlayer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link playerABI}__.
 *
 *
 */
export function usePlayerEvent<TEventName extends string>(
    config: Omit<
        UseContractEventConfig<typeof playerABI, TEventName>,
        'abi' | 'address'
    > & { chainId?: keyof typeof playerAddress } = {} as any,
) {
    return useContractEvent({
        abi: playerABI,
        address: playerAddress[31337],
        ...config,
    } as UseContractEventConfig<typeof playerABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link playerABI}__ and `eventName` set to `"DamageReceived"`.
 *
 *
 */
export function usePlayerDamageReceivedEvent(
    config: Omit<
        UseContractEventConfig<typeof playerABI, 'DamageReceived'>,
        'abi' | 'address' | 'eventName'
    > & { chainId?: keyof typeof playerAddress } = {} as any,
) {
    return useContractEvent({
        abi: playerABI,
        address: playerAddress[31337],
        eventName: 'DamageReceived',
        ...config,
    } as UseContractEventConfig<typeof playerABI, 'DamageReceived'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link playerABI}__ and `eventName` set to `"DiceRolled"`.
 *
 *
 */
export function usePlayerDiceRolledEvent(
    config: Omit<
        UseContractEventConfig<typeof playerABI, 'DiceRolled'>,
        'abi' | 'address' | 'eventName'
    > & { chainId?: keyof typeof playerAddress } = {} as any,
) {
    return useContractEvent({
        abi: playerABI,
        address: playerAddress[31337],
        eventName: 'DiceRolled',
        ...config,
    } as UseContractEventConfig<typeof playerABI, 'DiceRolled'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link playerABI}__ and `eventName` set to `"MessageSent"`.
 *
 *
 */
export function usePlayerMessageSentEvent(
    config: Omit<
        UseContractEventConfig<typeof playerABI, 'MessageSent'>,
        'abi' | 'address' | 'eventName'
    > & { chainId?: keyof typeof playerAddress } = {} as any,
) {
    return useContractEvent({
        abi: playerABI,
        address: playerAddress[31337],
        eventName: 'MessageSent',
        ...config,
    } as UseContractEventConfig<typeof playerABI, 'MessageSent'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link playerABI}__ and `eventName` set to `"PlayerDied"`.
 *
 *
 */
export function usePlayerPlayerDiedEvent(
    config: Omit<
        UseContractEventConfig<typeof playerABI, 'PlayerDied'>,
        'abi' | 'address' | 'eventName'
    > & { chainId?: keyof typeof playerAddress } = {} as any,
) {
    return useContractEvent({
        abi: playerABI,
        address: playerAddress[31337],
        eventName: 'PlayerDied',
        ...config,
    } as UseContractEventConfig<typeof playerABI, 'PlayerDied'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link playerABI}__ and `eventName` set to `"PlayerRegistered"`.
 *
 *
 */
export function usePlayerPlayerRegisteredEvent(
    config: Omit<
        UseContractEventConfig<typeof playerABI, 'PlayerRegistered'>,
        'abi' | 'address' | 'eventName'
    > & { chainId?: keyof typeof playerAddress } = {} as any,
) {
    return useContractEvent({
        abi: playerABI,
        address: playerAddress[31337],
        eventName: 'PlayerRegistered',
        ...config,
    } as UseContractEventConfig<typeof playerABI, 'PlayerRegistered'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link playerABI}__ and `eventName` set to `"SessionJoined"`.
 *
 *
 */
export function usePlayerSessionJoinedEvent(
    config: Omit<
        UseContractEventConfig<typeof playerABI, 'SessionJoined'>,
        'abi' | 'address' | 'eventName'
    > & { chainId?: keyof typeof playerAddress } = {} as any,
) {
    return useContractEvent({
        abi: playerABI,
        address: playerAddress[31337],
        eventName: 'SessionJoined',
        ...config,
    } as UseContractEventConfig<typeof playerABI, 'SessionJoined'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link playerABI}__ and `eventName` set to `"TeamJoined"`.
 *
 *
 */
export function usePlayerTeamJoinedEvent(
    config: Omit<
        UseContractEventConfig<typeof playerABI, 'TeamJoined'>,
        'abi' | 'address' | 'eventName'
    > & { chainId?: keyof typeof playerAddress } = {} as any,
) {
    return useContractEvent({
        abi: playerABI,
        address: playerAddress[31337],
        eventName: 'TeamJoined',
        ...config,
    } as UseContractEventConfig<typeof playerABI, 'TeamJoined'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link teamABI}__.
 *
 *
 */
export function useTeamRead<
    TFunctionName extends string,
    TSelectData = ReadContractResult<typeof teamABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof teamABI, TFunctionName, TSelectData>,
        'abi' | 'address'
    > & { chainId?: keyof typeof teamAddress } = {} as any,
) {
    return useContractRead({
        abi: teamABI,
        address: teamAddress[31337],
        ...config,
    } as UseContractReadConfig<typeof teamABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link teamABI}__ and `functionName` set to `"MAX_PLAYERS_PER_TEAM"`.
 *
 *
 */
export function useTeamMaxPlayersPerTeam<
    TFunctionName extends 'MAX_PLAYERS_PER_TEAM',
    TSelectData = ReadContractResult<typeof teamABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof teamABI, TFunctionName, TSelectData>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof teamAddress } = {} as any,
) {
    return useContractRead({
        abi: teamABI,
        address: teamAddress[31337],
        functionName: 'MAX_PLAYERS_PER_TEAM',
        ...config,
    } as UseContractReadConfig<typeof teamABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link teamABI}__ and `functionName` set to `"MAX_TEAM_PER_GM"`.
 *
 *
 */
export function useTeamMaxTeamPerGm<
    TFunctionName extends 'MAX_TEAM_PER_GM',
    TSelectData = ReadContractResult<typeof teamABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof teamABI, TFunctionName, TSelectData>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof teamAddress } = {} as any,
) {
    return useContractRead({
        abi: teamABI,
        address: teamAddress[31337],
        functionName: 'MAX_TEAM_PER_GM',
        ...config,
    } as UseContractReadConfig<typeof teamABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link teamABI}__ and `functionName` set to `"certificationContract"`.
 *
 *
 */
export function useTeamCertificationContract<
    TFunctionName extends 'certificationContract',
    TSelectData = ReadContractResult<typeof teamABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof teamABI, TFunctionName, TSelectData>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof teamAddress } = {} as any,
) {
    return useContractRead({
        abi: teamABI,
        address: teamAddress[31337],
        functionName: 'certificationContract',
        ...config,
    } as UseContractReadConfig<typeof teamABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link teamABI}__ and `functionName` set to `"getTeam"`.
 *
 *
 */
export function useTeamGetTeam<
    TFunctionName extends 'getTeam',
    TSelectData = ReadContractResult<typeof teamABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof teamABI, TFunctionName, TSelectData>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof teamAddress } = {} as any,
) {
    return useContractRead({
        abi: teamABI,
        address: teamAddress[31337],
        functionName: 'getTeam',
        ...config,
    } as UseContractReadConfig<typeof teamABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link teamABI}__ and `functionName` set to `"getTeamsOfGM"`.
 *
 *
 */
export function useTeamGetTeamsOfGm<
    TFunctionName extends 'getTeamsOfGM',
    TSelectData = ReadContractResult<typeof teamABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof teamABI, TFunctionName, TSelectData>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof teamAddress } = {} as any,
) {
    return useContractRead({
        abi: teamABI,
        address: teamAddress[31337],
        functionName: 'getTeamsOfGM',
        ...config,
    } as UseContractReadConfig<typeof teamABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link teamABI}__ and `functionName` set to `"getTeamsOfPlayer"`.
 *
 *
 */
export function useTeamGetTeamsOfPlayer<
    TFunctionName extends 'getTeamsOfPlayer',
    TSelectData = ReadContractResult<typeof teamABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof teamABI, TFunctionName, TSelectData>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof teamAddress } = {} as any,
) {
    return useContractRead({
        abi: teamABI,
        address: teamAddress[31337],
        functionName: 'getTeamsOfPlayer',
        ...config,
    } as UseContractReadConfig<typeof teamABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link teamABI}__ and `functionName` set to `"isSessionActive"`.
 *
 *
 */
export function useTeamIsSessionActive<
    TFunctionName extends 'isSessionActive',
    TSelectData = ReadContractResult<typeof teamABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof teamABI, TFunctionName, TSelectData>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof teamAddress } = {} as any,
) {
    return useContractRead({
        abi: teamABI,
        address: teamAddress[31337],
        functionName: 'isSessionActive',
        ...config,
    } as UseContractReadConfig<typeof teamABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link teamABI}__ and `functionName` set to `"owner"`.
 *
 *
 */
export function useTeamOwner<
    TFunctionName extends 'owner',
    TSelectData = ReadContractResult<typeof teamABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof teamABI, TFunctionName, TSelectData>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof teamAddress } = {} as any,
) {
    return useContractRead({
        abi: teamABI,
        address: teamAddress[31337],
        functionName: 'owner',
        ...config,
    } as UseContractReadConfig<typeof teamABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link teamABI}__ and `functionName` set to `"sessionContract"`.
 *
 *
 */
export function useTeamSessionContract<
    TFunctionName extends 'sessionContract',
    TSelectData = ReadContractResult<typeof teamABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof teamABI, TFunctionName, TSelectData>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof teamAddress } = {} as any,
) {
    return useContractRead({
        abi: teamABI,
        address: teamAddress[31337],
        functionName: 'sessionContract',
        ...config,
    } as UseContractReadConfig<typeof teamABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link teamABI}__ and `functionName` set to `"teamsByGM"`.
 *
 *
 */
export function useTeamTeamsByGm<
    TFunctionName extends 'teamsByGM',
    TSelectData = ReadContractResult<typeof teamABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof teamABI, TFunctionName, TSelectData>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof teamAddress } = {} as any,
) {
    return useContractRead({
        abi: teamABI,
        address: teamAddress[31337],
        functionName: 'teamsByGM',
        ...config,
    } as UseContractReadConfig<typeof teamABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link teamABI}__ and `functionName` set to `"teamsByPlayer"`.
 *
 *
 */
export function useTeamTeamsByPlayer<
    TFunctionName extends 'teamsByPlayer',
    TSelectData = ReadContractResult<typeof teamABI, TFunctionName>,
>(
    config: Omit<
        UseContractReadConfig<typeof teamABI, TFunctionName, TSelectData>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof teamAddress } = {} as any,
) {
    return useContractRead({
        abi: teamABI,
        address: teamAddress[31337],
        functionName: 'teamsByPlayer',
        ...config,
    } as UseContractReadConfig<typeof teamABI, TFunctionName, TSelectData>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link teamABI}__.
 *
 *
 */
export function useTeamWrite<
    TFunctionName extends string,
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof teamAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof teamABI,
                  string
              >['request']['abi'],
              TFunctionName,
              TMode
          > & { address?: Address; chainId?: TChainId }
        : UseContractWriteConfig<typeof teamABI, TFunctionName, TMode> & {
              abi?: never
              address?: never
              chainId?: TChainId
          } = {} as any,
) {
    return useContractWrite<typeof teamABI, TFunctionName, TMode>({
        abi: teamABI,
        address: teamAddress[31337],
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link teamABI}__ and `functionName` set to `"createSession"`.
 *
 *
 */
export function useTeamCreateSession<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof teamAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof teamABI,
                  'createSession'
              >['request']['abi'],
              'createSession',
              TMode
          > & {
              address?: Address
              chainId?: TChainId
              functionName?: 'createSession'
          }
        : UseContractWriteConfig<typeof teamABI, 'createSession', TMode> & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'createSession'
          } = {} as any,
) {
    return useContractWrite<typeof teamABI, 'createSession', TMode>({
        abi: teamABI,
        address: teamAddress[31337],
        functionName: 'createSession',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link teamABI}__ and `functionName` set to `"createTeam"`.
 *
 *
 */
export function useTeamCreateTeam<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof teamAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof teamABI,
                  'createTeam'
              >['request']['abi'],
              'createTeam',
              TMode
          > & {
              address?: Address
              chainId?: TChainId
              functionName?: 'createTeam'
          }
        : UseContractWriteConfig<typeof teamABI, 'createTeam', TMode> & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'createTeam'
          } = {} as any,
) {
    return useContractWrite<typeof teamABI, 'createTeam', TMode>({
        abi: teamABI,
        address: teamAddress[31337],
        functionName: 'createTeam',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link teamABI}__ and `functionName` set to `"deleteTeam"`.
 *
 *
 */
export function useTeamDeleteTeam<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof teamAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof teamABI,
                  'deleteTeam'
              >['request']['abi'],
              'deleteTeam',
              TMode
          > & {
              address?: Address
              chainId?: TChainId
              functionName?: 'deleteTeam'
          }
        : UseContractWriteConfig<typeof teamABI, 'deleteTeam', TMode> & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'deleteTeam'
          } = {} as any,
) {
    return useContractWrite<typeof teamABI, 'deleteTeam', TMode>({
        abi: teamABI,
        address: teamAddress[31337],
        functionName: 'deleteTeam',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link teamABI}__ and `functionName` set to `"endSession"`.
 *
 *
 */
export function useTeamEndSession<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof teamAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof teamABI,
                  'endSession'
              >['request']['abi'],
              'endSession',
              TMode
          > & {
              address?: Address
              chainId?: TChainId
              functionName?: 'endSession'
          }
        : UseContractWriteConfig<typeof teamABI, 'endSession', TMode> & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'endSession'
          } = {} as any,
) {
    return useContractWrite<typeof teamABI, 'endSession', TMode>({
        abi: teamABI,
        address: teamAddress[31337],
        functionName: 'endSession',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link teamABI}__ and `functionName` set to `"joinTeam"`.
 *
 *
 */
export function useTeamJoinTeam<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof teamAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof teamABI,
                  'joinTeam'
              >['request']['abi'],
              'joinTeam',
              TMode
          > & {
              address?: Address
              chainId?: TChainId
              functionName?: 'joinTeam'
          }
        : UseContractWriteConfig<typeof teamABI, 'joinTeam', TMode> & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'joinTeam'
          } = {} as any,
) {
    return useContractWrite<typeof teamABI, 'joinTeam', TMode>({
        abi: teamABI,
        address: teamAddress[31337],
        functionName: 'joinTeam',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link teamABI}__ and `functionName` set to `"leaveTeam"`.
 *
 *
 */
export function useTeamLeaveTeam<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof teamAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof teamABI,
                  'leaveTeam'
              >['request']['abi'],
              'leaveTeam',
              TMode
          > & {
              address?: Address
              chainId?: TChainId
              functionName?: 'leaveTeam'
          }
        : UseContractWriteConfig<typeof teamABI, 'leaveTeam', TMode> & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'leaveTeam'
          } = {} as any,
) {
    return useContractWrite<typeof teamABI, 'leaveTeam', TMode>({
        abi: teamABI,
        address: teamAddress[31337],
        functionName: 'leaveTeam',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link teamABI}__ and `functionName` set to `"payFee"`.
 *
 *
 */
export function useTeamPayFee<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof teamAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof teamABI,
                  'payFee'
              >['request']['abi'],
              'payFee',
              TMode
          > & { address?: Address; chainId?: TChainId; functionName?: 'payFee' }
        : UseContractWriteConfig<typeof teamABI, 'payFee', TMode> & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'payFee'
          } = {} as any,
) {
    return useContractWrite<typeof teamABI, 'payFee', TMode>({
        abi: teamABI,
        address: teamAddress[31337],
        functionName: 'payFee',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link teamABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 *
 */
export function useTeamRenounceOwnership<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof teamAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof teamABI,
                  'renounceOwnership'
              >['request']['abi'],
              'renounceOwnership',
              TMode
          > & {
              address?: Address
              chainId?: TChainId
              functionName?: 'renounceOwnership'
          }
        : UseContractWriteConfig<typeof teamABI, 'renounceOwnership', TMode> & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'renounceOwnership'
          } = {} as any,
) {
    return useContractWrite<typeof teamABI, 'renounceOwnership', TMode>({
        abi: teamABI,
        address: teamAddress[31337],
        functionName: 'renounceOwnership',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link teamABI}__ and `functionName` set to `"rollDice"`.
 *
 *
 */
export function useTeamRollDice<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof teamAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof teamABI,
                  'rollDice'
              >['request']['abi'],
              'rollDice',
              TMode
          > & {
              address?: Address
              chainId?: TChainId
              functionName?: 'rollDice'
          }
        : UseContractWriteConfig<typeof teamABI, 'rollDice', TMode> & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'rollDice'
          } = {} as any,
) {
    return useContractWrite<typeof teamABI, 'rollDice', TMode>({
        abi: teamABI,
        address: teamAddress[31337],
        functionName: 'rollDice',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link teamABI}__ and `functionName` set to `"sendMessage"`.
 *
 *
 */
export function useTeamSendMessage<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof teamAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof teamABI,
                  'sendMessage'
              >['request']['abi'],
              'sendMessage',
              TMode
          > & {
              address?: Address
              chainId?: TChainId
              functionName?: 'sendMessage'
          }
        : UseContractWriteConfig<typeof teamABI, 'sendMessage', TMode> & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'sendMessage'
          } = {} as any,
) {
    return useContractWrite<typeof teamABI, 'sendMessage', TMode>({
        abi: teamABI,
        address: teamAddress[31337],
        functionName: 'sendMessage',
        ...config,
    } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link teamABI}__ and `functionName` set to `"transferOwnership"`.
 *
 *
 */
export function useTeamTransferOwnership<
    TMode extends WriteContractMode = undefined,
    TChainId extends number = keyof typeof teamAddress,
>(
    config: TMode extends 'prepared'
        ? UseContractWriteConfig<
              PrepareWriteContractResult<
                  typeof teamABI,
                  'transferOwnership'
              >['request']['abi'],
              'transferOwnership',
              TMode
          > & {
              address?: Address
              chainId?: TChainId
              functionName?: 'transferOwnership'
          }
        : UseContractWriteConfig<typeof teamABI, 'transferOwnership', TMode> & {
              abi?: never
              address?: never
              chainId?: TChainId
              functionName?: 'transferOwnership'
          } = {} as any,
) {
    return useContractWrite<typeof teamABI, 'transferOwnership', TMode>({
        abi: teamABI,
        address: teamAddress[31337],
        functionName: 'transferOwnership',
        ...config,
    } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link teamABI}__.
 *
 *
 */
export function usePrepareTeamWrite<TFunctionName extends string>(
    config: Omit<
        UsePrepareContractWriteConfig<typeof teamABI, TFunctionName>,
        'abi' | 'address'
    > & { chainId?: keyof typeof teamAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: teamABI,
        address: teamAddress[31337],
        ...config,
    } as UsePrepareContractWriteConfig<typeof teamABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link teamABI}__ and `functionName` set to `"createSession"`.
 *
 *
 */
export function usePrepareTeamCreateSession(
    config: Omit<
        UsePrepareContractWriteConfig<typeof teamABI, 'createSession'>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof teamAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: teamABI,
        address: teamAddress[31337],
        functionName: 'createSession',
        ...config,
    } as UsePrepareContractWriteConfig<typeof teamABI, 'createSession'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link teamABI}__ and `functionName` set to `"createTeam"`.
 *
 *
 */
export function usePrepareTeamCreateTeam(
    config: Omit<
        UsePrepareContractWriteConfig<typeof teamABI, 'createTeam'>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof teamAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: teamABI,
        address: teamAddress[31337],
        functionName: 'createTeam',
        ...config,
    } as UsePrepareContractWriteConfig<typeof teamABI, 'createTeam'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link teamABI}__ and `functionName` set to `"deleteTeam"`.
 *
 *
 */
export function usePrepareTeamDeleteTeam(
    config: Omit<
        UsePrepareContractWriteConfig<typeof teamABI, 'deleteTeam'>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof teamAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: teamABI,
        address: teamAddress[31337],
        functionName: 'deleteTeam',
        ...config,
    } as UsePrepareContractWriteConfig<typeof teamABI, 'deleteTeam'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link teamABI}__ and `functionName` set to `"endSession"`.
 *
 *
 */
export function usePrepareTeamEndSession(
    config: Omit<
        UsePrepareContractWriteConfig<typeof teamABI, 'endSession'>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof teamAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: teamABI,
        address: teamAddress[31337],
        functionName: 'endSession',
        ...config,
    } as UsePrepareContractWriteConfig<typeof teamABI, 'endSession'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link teamABI}__ and `functionName` set to `"joinTeam"`.
 *
 *
 */
export function usePrepareTeamJoinTeam(
    config: Omit<
        UsePrepareContractWriteConfig<typeof teamABI, 'joinTeam'>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof teamAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: teamABI,
        address: teamAddress[31337],
        functionName: 'joinTeam',
        ...config,
    } as UsePrepareContractWriteConfig<typeof teamABI, 'joinTeam'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link teamABI}__ and `functionName` set to `"leaveTeam"`.
 *
 *
 */
export function usePrepareTeamLeaveTeam(
    config: Omit<
        UsePrepareContractWriteConfig<typeof teamABI, 'leaveTeam'>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof teamAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: teamABI,
        address: teamAddress[31337],
        functionName: 'leaveTeam',
        ...config,
    } as UsePrepareContractWriteConfig<typeof teamABI, 'leaveTeam'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link teamABI}__ and `functionName` set to `"payFee"`.
 *
 *
 */
export function usePrepareTeamPayFee(
    config: Omit<
        UsePrepareContractWriteConfig<typeof teamABI, 'payFee'>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof teamAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: teamABI,
        address: teamAddress[31337],
        functionName: 'payFee',
        ...config,
    } as UsePrepareContractWriteConfig<typeof teamABI, 'payFee'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link teamABI}__ and `functionName` set to `"renounceOwnership"`.
 *
 *
 */
export function usePrepareTeamRenounceOwnership(
    config: Omit<
        UsePrepareContractWriteConfig<typeof teamABI, 'renounceOwnership'>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof teamAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: teamABI,
        address: teamAddress[31337],
        functionName: 'renounceOwnership',
        ...config,
    } as UsePrepareContractWriteConfig<typeof teamABI, 'renounceOwnership'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link teamABI}__ and `functionName` set to `"rollDice"`.
 *
 *
 */
export function usePrepareTeamRollDice(
    config: Omit<
        UsePrepareContractWriteConfig<typeof teamABI, 'rollDice'>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof teamAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: teamABI,
        address: teamAddress[31337],
        functionName: 'rollDice',
        ...config,
    } as UsePrepareContractWriteConfig<typeof teamABI, 'rollDice'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link teamABI}__ and `functionName` set to `"sendMessage"`.
 *
 *
 */
export function usePrepareTeamSendMessage(
    config: Omit<
        UsePrepareContractWriteConfig<typeof teamABI, 'sendMessage'>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof teamAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: teamABI,
        address: teamAddress[31337],
        functionName: 'sendMessage',
        ...config,
    } as UsePrepareContractWriteConfig<typeof teamABI, 'sendMessage'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link teamABI}__ and `functionName` set to `"transferOwnership"`.
 *
 *
 */
export function usePrepareTeamTransferOwnership(
    config: Omit<
        UsePrepareContractWriteConfig<typeof teamABI, 'transferOwnership'>,
        'abi' | 'address' | 'functionName'
    > & { chainId?: keyof typeof teamAddress } = {} as any,
) {
    return usePrepareContractWrite({
        abi: teamABI,
        address: teamAddress[31337],
        functionName: 'transferOwnership',
        ...config,
    } as UsePrepareContractWriteConfig<typeof teamABI, 'transferOwnership'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link teamABI}__.
 *
 *
 */
export function useTeamEvent<TEventName extends string>(
    config: Omit<
        UseContractEventConfig<typeof teamABI, TEventName>,
        'abi' | 'address'
    > & { chainId?: keyof typeof teamAddress } = {} as any,
) {
    return useContractEvent({
        abi: teamABI,
        address: teamAddress[31337],
        ...config,
    } as UseContractEventConfig<typeof teamABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link teamABI}__ and `eventName` set to `"GamesPlayedIncremented"`.
 *
 *
 */
export function useTeamGamesPlayedIncrementedEvent(
    config: Omit<
        UseContractEventConfig<typeof teamABI, 'GamesPlayedIncremented'>,
        'abi' | 'address' | 'eventName'
    > & { chainId?: keyof typeof teamAddress } = {} as any,
) {
    return useContractEvent({
        abi: teamABI,
        address: teamAddress[31337],
        eventName: 'GamesPlayedIncremented',
        ...config,
    } as UseContractEventConfig<typeof teamABI, 'GamesPlayedIncremented'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link teamABI}__ and `eventName` set to `"OwnershipTransferred"`.
 *
 *
 */
export function useTeamOwnershipTransferredEvent(
    config: Omit<
        UseContractEventConfig<typeof teamABI, 'OwnershipTransferred'>,
        'abi' | 'address' | 'eventName'
    > & { chainId?: keyof typeof teamAddress } = {} as any,
) {
    return useContractEvent({
        abi: teamABI,
        address: teamAddress[31337],
        eventName: 'OwnershipTransferred',
        ...config,
    } as UseContractEventConfig<typeof teamABI, 'OwnershipTransferred'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link teamABI}__ and `eventName` set to `"PlayerJoinedTeam"`.
 *
 *
 */
export function useTeamPlayerJoinedTeamEvent(
    config: Omit<
        UseContractEventConfig<typeof teamABI, 'PlayerJoinedTeam'>,
        'abi' | 'address' | 'eventName'
    > & { chainId?: keyof typeof teamAddress } = {} as any,
) {
    return useContractEvent({
        abi: teamABI,
        address: teamAddress[31337],
        eventName: 'PlayerJoinedTeam',
        ...config,
    } as UseContractEventConfig<typeof teamABI, 'PlayerJoinedTeam'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link teamABI}__ and `eventName` set to `"PlayerLeftTeam"`.
 *
 *
 */
export function useTeamPlayerLeftTeamEvent(
    config: Omit<
        UseContractEventConfig<typeof teamABI, 'PlayerLeftTeam'>,
        'abi' | 'address' | 'eventName'
    > & { chainId?: keyof typeof teamAddress } = {} as any,
) {
    return useContractEvent({
        abi: teamABI,
        address: teamAddress[31337],
        eventName: 'PlayerLeftTeam',
        ...config,
    } as UseContractEventConfig<typeof teamABI, 'PlayerLeftTeam'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link teamABI}__ and `eventName` set to `"SessionCreated"`.
 *
 *
 */
export function useTeamSessionCreatedEvent(
    config: Omit<
        UseContractEventConfig<typeof teamABI, 'SessionCreated'>,
        'abi' | 'address' | 'eventName'
    > & { chainId?: keyof typeof teamAddress } = {} as any,
) {
    return useContractEvent({
        abi: teamABI,
        address: teamAddress[31337],
        eventName: 'SessionCreated',
        ...config,
    } as UseContractEventConfig<typeof teamABI, 'SessionCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link teamABI}__ and `eventName` set to `"SessionEnd"`.
 *
 *
 */
export function useTeamSessionEndEvent(
    config: Omit<
        UseContractEventConfig<typeof teamABI, 'SessionEnd'>,
        'abi' | 'address' | 'eventName'
    > & { chainId?: keyof typeof teamAddress } = {} as any,
) {
    return useContractEvent({
        abi: teamABI,
        address: teamAddress[31337],
        eventName: 'SessionEnd',
        ...config,
    } as UseContractEventConfig<typeof teamABI, 'SessionEnd'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link teamABI}__ and `eventName` set to `"TeamCreated"`.
 *
 *
 */
export function useTeamTeamCreatedEvent(
    config: Omit<
        UseContractEventConfig<typeof teamABI, 'TeamCreated'>,
        'abi' | 'address' | 'eventName'
    > & { chainId?: keyof typeof teamAddress } = {} as any,
) {
    return useContractEvent({
        abi: teamABI,
        address: teamAddress[31337],
        eventName: 'TeamCreated',
        ...config,
    } as UseContractEventConfig<typeof teamABI, 'TeamCreated'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link teamABI}__ and `eventName` set to `"TeamDeleted"`.
 *
 *
 */
export function useTeamTeamDeletedEvent(
    config: Omit<
        UseContractEventConfig<typeof teamABI, 'TeamDeleted'>,
        'abi' | 'address' | 'eventName'
    > & { chainId?: keyof typeof teamAddress } = {} as any,
) {
    return useContractEvent({
        abi: teamABI,
        address: teamAddress[31337],
        eventName: 'TeamDeleted',
        ...config,
    } as UseContractEventConfig<typeof teamABI, 'TeamDeleted'>)
}
